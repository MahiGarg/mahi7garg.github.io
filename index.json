[{"categories":["Blog"],"date":"May 29, 2022","permalink":"https://mahigarg.github.io/blogs/0-1-n-in-swift/","section":"blogs","summary":"In order to use any parameter in a closure or a higher-order function, we need to name the parameter inside the closure or higher-order function.\nThe syntax looks like the below.\nlet array = [1, 2, 3, 4, 5, 6] let evenNumbers = array.filter { item in item % 2 == 0 } print(evenNumbers) This filter function takes a single argument which is another function that is of (Int) -\u0026gt; Bool type. The inner function takes every element of the array one by one and checks if that is an even number or not. It returns true if the condition is true else it returns false.\nThe parameter passed inside the function can be replaced with $0.\n$0 represents the first parameter of closure or higher-order function.\nIt can be used with both closers or higher-order functions.\nThe same syntax will look like below.\nlet array = [1, 2, 3, 4, 5, 6] let evenNumbers = array.filter { $0 % 2 == 0 } print(evenNumbers) In case the number of parameters are more than one,\n$0, $1 up to $n can be used.\nFor example, look at the below case where there are two parameters passed to the higher-order function namely index and item.\nlet array = [1, 2, 3, 4, 5, 6] let filterArray = array.enumerated().filter {index, item in //I am doing some rocket science here print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) return index != 2 \u0026amp;\u0026amp; item % 2 == 0 } print(filterArray) We can use $0 for index and $1 for item in the same example.\nlet array = [1, 2, 3, 4, 5, 6] let filterArray = array.enumerated().filter { //I am doing some rocket science here print(\u0026#34;Item at \\($0) is \\($1)\u0026#34;) return $0 != 2 \u0026amp;\u0026amp; $1 % 2 == 0 } print(filterArray) These numbers can go up to any number of parameters passed to the inner function.\nI’ll personally suggest using named parameters if the parameters are more than three as it\u0026rsquo;s difficult to remember which $ variable is what. Up to three is really helpful.\n","tags":["Swift"],"title":"$0, $1 … $n in Swift"},{"categories":["Blog"],"date":"May 28, 2022","permalink":"https://mahigarg.github.io/blogs/enumerated-in-swift/","section":"blogs","summary":"Enumerated is used to iterate over a collection along with the position access. It returns a sequence of Pairs where the first element in the Pair is the index and the second element is the element itself of the collection.\nEnumerated is useful when we want to access the position along with making any iteration, filtration or even mapping of the objects of a collection.\nLets look at its definition first.\n/* Returns a sequence of pairs (*n*, *x*), where *n* represents a consecutive integer starting at zero and *x* represents an element of the sequence. */ @inlinable public func enumerated() -\u0026gt; EnumeratedSequence\u0026lt;Array\u0026lt;Element\u0026gt;\u0026gt; Enumerated best use case is with an array.\nlet array = [1, 2, 3, 4, 5] for (index, item) in array.enumerated() { print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) } It can also be used with set and map but the order of insertion is not guaranteed in both set and map.\nlet set = [1, 2, 3, 4, 5] for (index, item) in set.enumerated() { print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) } let map = [1: \u0026#34;One\u0026#34;, 2: \u0026#34;Two\u0026#34;, 3: \u0026#34;Three\u0026#34;] for (index, item) in map.enumerated() { print(\u0026#34;Item at \\(index) is key: \\(item.key) value: \\(item.value)\u0026#34;) } Enumerated can also be used to iterate over a string with the sequence of Pairs of the index and the respective character at that index.\nfor (index, item) in \u0026#34;Swift\u0026#34;.enumerated() { print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) } //this will print Item at 0 is S Item at 1 is w Item at 2 is i Item at 3 is f Item at 4 is t There is no need to convert the string to a char array first and then iterate over it. The Enumerated function will take care of it.\n","tags":["Swift"],"title":"Enumerated in Swift"},{"categories":["Blog"],"date":"May 28, 2022","permalink":"https://mahigarg.github.io/blogs/named-and-unnamed-parameters-swift/","section":"blogs","summary":"Functions are something that every developer uses daily. A function can of with or without parameters. Swift has multiple ways of passing the parameters to a function. we can alias the parameter name or we can even skip the parameter name while calling the function.\nThe parameter inside the function will still be used by its own name only but while calling the function, the name of the parameter can be replaced or even removed based on the function signature.\nLet\u0026rsquo;s look at them one by one.\nBelow is a normal function with a single parameter and calling it using the parameter name\nfunc doSomething(number : Int){ //I\u0026#39;ll do some rocket science here, //and at the end, will just print the param print (number) } doSomething(number: 100) In order to call the above function, we need to write the parameter name. In the above case the parameter name was number .\nSometimes it\u0026rsquo;s tedious to write the parameter name again and again or sometimes the function name itself is enough to make understand what that function is responsible for.\nIn those cases, in order to skip the parameter name every time we call that function, it can be preceded with an underscore _ which will make the parameter name unnamed.\nfunc doSomethingWithNumber(_ number : Int){ //I\u0026#39;ll do some rocket science here, //and at the end, will just print the param print (number) } doSomethingWithNumber(100) Here in the above example, we added an underscore _ in front of the parameter name which made the parameter unnamed. In order to call this function now, we don’t have to add the parameter name ie number in our case.\nKeep in mind that we can’t even use the parameter name now. Underscore _ doesn’t make it optional but it actually made it unnamed.\nWe can even provide an alias to the parameter after which the parameter will be used with the new alias name instead of the original parameter name.\nfunc doSomething(with number : Int){ //I\u0026#39;ll do some rocket science here, //and at the end, will just print the param print (number) } doSomething(with: 100) In the above example, we added with as an alias name for the parameter. Now in order to call this function, we need to use with as the parameter name instead of number.\nKeep in mind that this is not optional to use as a parameter name but it is mandatory.\nAlso, in all the cases, the parameter inside that function will still be used as its own name only. There is no change in that.\n","tags":["Swift"],"title":"Named and Unnamed Parameters: Swift"},{"categories":["Blog"],"date":"May 23, 2022","permalink":"https://mahigarg.github.io/blogs/labeled-statement-swift/","section":"blogs","summary":"Swift has a few inbuilt features which make our life super easy. Labeled statements are one of them. It allows us to name a statement and later within the scope, that particular statement can be referenced using the label provided.\nLet me explain this using an example. Assume we have a nested loop inside another loop. We want to break the inner as well as out loop on some condition.\nfor i in 0...5 { for j in 0...5 { print (i + j) //break from outer loop if i + j == 5 } } Break statement can help here but break statement only works for immediate loop.\nfor i in 0...5 { for j in 0...5 { print (i + j) //break from outer loop if i + j == 5 if (i + j == 5) { break } } } It will just break the inner loop but not the outer loop.\nThere is one way where we can use a boolean flag and set it to true when we found the first condition true and every time we check inside the outer loop for that flag.\nThere is another way where we can move this to a function and return from the function when the first time condition met.\nBut there is a simpler way in swift which can help us here. we can name the loops as per the requirement and can break them using the name of the loop as below.\nouterLoop: for i in 0...5 { innerLoop: for j in 0...5 { print (i + j) //break from outer loop if i + j == 5 if (i + j == 5) { break outerLoop } } } We can skip the label if we are not going to use it inside.\nThese label statement can be used with if statement, for-loop, while-loop, repeat and switch statement which makes our life super easy.\n","tags":["Swift"],"title":"Labeled Statement : Swift"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/explore/","section":"portfolio","summary":"","tags":null,"title":"Explore"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/gooir/","section":"portfolio","summary":"","tags":null,"title":"Gooir"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/kana/","section":"portfolio","summary":"","tags":null,"title":"Kana"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/mozar/","section":"portfolio","summary":"","tags":null,"title":"Mozar"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/stay-fit/","section":"portfolio","summary":"","tags":null,"title":"Stay Fit"},{"categories":null,"date":"January 1, 0001","permalink":"https://mahigarg.github.io/portfolio/zorro/","section":"portfolio","summary":"","tags":null,"title":"Zorro"}]