[{"categories":["Gist"],"date":"July 18, 2023","permalink":"https://mahigarg.github.io/gists/bubble-sort-swift/","section":"gists","summary":"Bubble sort is a simple and straightforward sorting algorithm commonly used in computer science. In Swift language, Bubble sort works by repeatedly swapping adjacent elements if they are in the wrong order until the entire list is sorted. It has a time complexity of O(n^2), making it inefficient for large data sets. The algorithm iterates through the list multiple times, comparing and swapping elements. However, it is easy to understand and implement, making it suitable for small or nearly sorted arrays where simplicity is prioritized over efficiency. For larger data sets, more efficient sorting algorithms like QuickSort or MergeSort are preferred.\n","tags":["Programming-Basics"],"title":"Bubble Sort : Swift"},{"categories":["Gist"],"date":"July 15, 2023","permalink":"https://mahigarg.github.io/gists/carousel-view-swiftui/","section":"gists","summary":"A carousel view is a user interface component commonly used in mobile and web applications to display a collection of items in a horizontally scrolling manner. It allows users to swipe or navigate through a set of images, cards, or other content. The carousel view typically presents a subset of items at a time, with the ability to cycle through the remaining items. It is an engaging and intuitive way to showcase multiple pieces of content within a limited space, providing an interactive and visually appealing user experience.\n","tags":["SwiftUI"],"title":"Carousel View : SwiftUI"},{"categories":["Gist"],"date":"July 13, 2023","permalink":"https://mahigarg.github.io/gists/linked-list-methods-swift/","section":"gists","summary":"A linked list is a data structure in Swift that consists of nodes linked together via pointers or references. Each node contains data and a reference to the next node. Unlike an array, a linked list does not require contiguous memory allocation. Insertions and deletions can be performed efficiently in a linked list by updating the pointers, but accessing elements requires traversing the list linearly. Linked lists are useful when frequent insertions or deletions are expected, and their time complexity for most operations is O(1) or O(n) depending on the operation.\n","tags":["Programming-Basics"],"title":"Linked List : Swift"},{"categories":["Gist"],"date":"July 11, 2023","permalink":"https://mahigarg.github.io/gists/remove-duplicate-array-swift/","section":"gists","summary":"To remove duplicates from an array in Swift using a dictionary, we can create an empty dictionary and iterate through the array. For each element, we use it as a key in the dictionary and assign a dummy value. The dictionary automatically removes duplicate keys, so we end up with only unique elements. The time complexity of this approach is O(n), where n is the number of elements in the array, making it an efficient solution for removing duplicates..\n","tags":["Programming-Basics"],"title":"Remove duplicates from array: Swift"},{"categories":["Gist"],"date":"July 8, 2023","permalink":"https://mahigarg.github.io/gists/binary-serach-swift/","section":"gists","summary":"Binary search is an efficient search algorithm used to locate a specific element in a sorted array or list. It works by repeatedly dividing the search space in half until the target element is found. In Swift, binary search is typically implemented recursively or iteratively. The time complexity of binary search is O(log n), where n is the number of elements in the array. This makes it highly efficient for large data sets as it eliminates half of the remaining search space at each step, significantly reducing the search time.\n","tags":["Programming-Basics"],"title":"Binary Serach : Swift"},{"categories":["Gist"],"date":"July 8, 2023","permalink":"https://mahigarg.github.io/gists/merge-array-swift/","section":"gists","summary":"Merging two sorted Int arrays in Swift means combining them into a single sorted array while preserving the order. With Swift, you can efficiently implement the merging algorithm. By comparing elements in both arrays and arranging them accordingly, you\u0026rsquo;ll obtain a new sorted array. This process ensures that the elements from both arrays are in ascending order, allowing you to organize your data effectively. The merged sorted Int array can be readily used in your Swift app for various purposes like displaying sorted lists or conducting efficient searches.\n","tags":["Programming-Basics"],"title":"Merge 2 sorted Array: Swift"},{"categories":["Gist"],"date":"July 8, 2023","permalink":"https://mahigarg.github.io/gists/merge-linked-list-swift/","section":"gists","summary":"Merging two sorted linked lists in Swift is like combining two ordered lists into one, while still maintaining the sorted order. You can use Swift to define the linked list structure and implement a merging algorithm. By comparing the elements in both lists and arranging them accordingly, you\u0026rsquo;ll create a new sorted linked list. This process ensures that the elements from both lists are in ascending order, resulting in a single, sorted, and merged linked list that you can use in your Swift app for efficient data organization.\n","tags":["Programming-Basics"],"title":"Merge 2 sorted Linked List: Swift"},{"categories":["Gist"],"date":"July 5, 2023","permalink":"https://mahigarg.github.io/gists/instagram-post-swiftui/","section":"gists","summary":"Coding an Instagram post in SwiftUI is an engaging project. You can use various components like images, text, and buttons to design a post layout. With SwiftUI\u0026rsquo;s simple syntax and powerful features, you can easily arrange the content and customize the post\u0026rsquo;s appearance. Adding interactive features like like and comment buttons makes the post come alive. It\u0026rsquo;s a fun way to learn SwiftUI and create your own unique Instagram-style posts, perfect for displaying your creativity or sharing with friends on social media.\n","tags":["SwiftUI"],"title":"Instagram Post : SwiftUI"},{"categories":["Gist"],"date":"July 3, 2023","permalink":"https://mahigarg.github.io/gists/instagram-logo-swiftui/","section":"gists","summary":"Creating the Instagram logo in SwiftUI is an exciting task. Using basic shapes like circles, squares, and colors, you can piece together the iconic camera symbol and colorful gradient background. With SwiftUI\u0026rsquo;s user-friendly syntax and pre-built shape modifiers, you\u0026rsquo;ll enjoy a smooth coding experience. By combining shapes and arranging them creatively, you can replicate the recognizable Instagram logo, ready to be used in your own SwiftUI projects or to explore your coding creativity. Have fun and unleash your artistic side while coding this popular logo!\n","tags":["SwiftUI"],"title":"Instagarm Logo : SwiftUI"},{"categories":["Blog"],"date":"July 2, 2023","permalink":"https://mahigarg.github.io/blogs/computed-property-in-swift/","section":"blogs","summary":"In Swift, computed properties are a powerful and elegant feature that allows developers to define custom accessors for their properties. Unlike stored properties, computed properties do not store a value directly. Instead, they calculate their value on-the-fly based on the getter and, if needed, the setter logic provided by the developer. This flexibility opens up numerous possibilities for streamlining code, encapsulating complex logic, and creating more readable and maintainable code.\nIn this blog, we\u0026rsquo;ll dive into computed properties in Swift, learn how they work, and explore several real-world examples where they can significantly improve your code.\nSimple Computed Property Let\u0026rsquo;s start with a straightforward example. Imagine a Circle struct representing a circle with a given radius. Instead of manually computing the area each time, we can create a computed property area that automatically calculates it for us.\nstruct Circle { let radius: Double var area: Double { return Double.pi * radius * radius } } let circle = Circle(radius: 5) print(\u0026#34;Circle\u0026#39;s area: \\(circle.area)\u0026#34;) Computed Property with Dependencies Computed properties can have dependencies on other properties within the same struct or class. For instance, consider a Rectangle struct with width and height properties. We can create a computed property perimeter that depends on these values.\nstruct Rectangle { var width: Double var height: Double var perimeter: Double { return 2 * (width + height) } } var rectangle = Rectangle(width: 10, height: 5) print(\u0026#34;Rectangle\u0026#39;s perimeter: \\(rectangle.perimeter)\u0026#34;) Read-Only Computed Property Computed properties can be either read-only (with only a getter) or read-write (with both a getter and a setter). Let\u0026rsquo;s take a look at an example of a read-only computed property in the context of a Temperature struct.\nstruct Temperature { var celsius: Double var fahrenheit: Double { return celsius * 9 / 5 + 32 } } let temperature = Temperature(celsius: 25) print(\u0026#34;Temperature in Fahrenheit: \\(temperature.fahrenheit)\u0026#34;) Computed Property in Enums Even enums can benefit from computed properties. Consider a Card enum representing a playing card. We can create a computed property isFaceCard that returns true for face cards (Jacks, Queens, and Kings).\nenum Card { case ace, number(Int), face(String) var isFaceCard: Bool { switch self { case .face, .ace: return true case .number: return false } } } let card1 = Card.ace let card2 = Card.face(\u0026#34;Queen\u0026#34;) print(\u0026#34;Card 1 is a face card: \\(card1.isFaceCard)\u0026#34;) print(\u0026#34;Card 2 is a face card: \\(card2.isFaceCard)\u0026#34;) Conclusion Computed properties in Swift offer a flexible and efficient way to encapsulate logic and simplify code. Whether you need to calculate derived properties, create dependencies between properties, or add custom behavior to your data structures, computed properties are the ideal tool for the job.\nBy embracing computed properties in your Swift code, you can enhance code readability, maintainability, and reduce redundancy. This powerful feature demonstrates Swift\u0026rsquo;s commitment to providing developers with elegant and expressive language features.\nStart leveraging computed properties in your own projects today, and witness the benefits of cleaner, more efficient code! Happy coding!\n","tags":["Swift"],"title":"Computed Property in Swift"},{"categories":["Gist"],"date":"July 2, 2023","permalink":"https://mahigarg.github.io/gists/insertion-sort-swift/","section":"gists","summary":"Insertion sort is a simple sorting algorithm in Swift that builds the final sorted array one element at a time. It iterates through the array, comparing each element with the sorted portion and placing it in the correct position. This process continues until all elements are sorted. Insertion sort has a time complexity of O(n^2) in the worst case, but it performs well on small data sets or partially sorted arrays. It also has an advantage in that it can efficiently sort elements in real-time as they are received or generated.\n","tags":["Programming-Basics"],"title":"Insertion Sort : Swift"},{"categories":["Blog"],"date":"June 30, 2023","permalink":"https://mahigarg.github.io/blogs/guard-let-in-swift/","section":"blogs","summary":"guard let : Art of Early Returns with Optionals Introduction: In the realm of Swift programming, handling optionals with precision is of paramount importance to ensure code safety and maintainability. One of the most elegant constructs for handling optionals is the guard let statement. In this blog, we will delve into the world of guard let and explore how it enables developers to gracefully exit functions early when dealing with optional values. By the end of this blog, you will understand why guard let is a powerful tool in your Swift programming arsenal.\nUnderstanding Optionals in Swift: Before we jump into the wonders of guard let, let\u0026rsquo;s take a moment to understand optionals in Swift. An optional is a type that can either store a value or be nil. The presence of the question mark \u0026lsquo;?\u0026rsquo; after a type indicates that it is an optional type. For instance, String? denotes an optional String.\nThe Purpose of guard let: guard let is a control flow statement that ensures a value exists within an optional and, if so, binds it to a non-optional variable for use within the current scope. If the value is nil, the guard statement mandates an early exit from the current function, guard clause, or loop. It helps to keep the main body of code clean and readable by eliminating deeply nested if statements.\nSyntax of guard let: The syntax of guard let is as follows:\nfunc someFunction() { guard let nonOptionalVar = optionalVar else { // Code to be executed if optionalVar is nil // Return, throw, or continue with the rest of the function\u0026#39;s code } // Code to be executed if optionalVar is not nil // nonOptionalVar is safely unwrapped and ready for use within this scope } Example of guard let: Let\u0026rsquo;s illustrate the power of guard let with an example. Suppose we have a function that accepts an optional Int and performs some operation on it:\nfunc performOperation(value: Int?) { // Ensure value is not nil using guard let guard let unwrappedValue = value else { print(\u0026#34;Value is nil. Operation cannot be performed.\u0026#34;) return } // Continue with the operation using unwrappedValue let result = unwrappedValue * 2 print(\u0026#34;The result is: \\(result)\u0026#34;) } In this example, the guard let statement ensures that the value is not nil. If it is nil, the function prints an error message and exits early using the return statement. Otherwise, it continues with the operation, multiplying the unwrappedValue by 2.\nAdvantages of using guard let: Readability: guard let enhances code readability by making the code more concise and reducing nested if statements. Early Exits: It encourages the practice of early exits from a function or block if necessary conditions are not met, leading to more structured and organized code. Safer Code: By forcing developers to handle the nil case upfront, guard let reduces the likelihood of runtime crashes due to unwrapping nil optionals. Improved Maintainability: The use of guard let allows you to handle edge cases efficiently, leading to more maintainable and future-proof code. Conclusion: In conclusion, guard let is a powerful tool that empowers Swift developers to handle optionals gracefully. By ensuring that optionals contain valid values and providing an elegant early exit strategy, guard let promotes code safety, readability, and maintainability. When dealing with optional values in Swift, remember to embrace the art of guard let to write clean, robust, and efficient code. Happy coding!\n","tags":["Swift"],"title":"guard let in Swift"},{"categories":["Gist"],"date":"June 28, 2023","permalink":"https://mahigarg.github.io/gists/selection-sort-swift/","section":"gists","summary":"Selection sort is a sorting algorithm in Swift that works by repeatedly finding the minimum element from the unsorted portion of an array and swapping it with the element in the correct position. This process is iterated until the entire array is sorted. While simple to understand and implement, selection sort has a time complexity of O(n^2), making it inefficient for large data sets. However, it has the advantage of having a minimal number of swaps, which can be beneficial in certain memory-constrained scenarios.\n","tags":["Programming-Basics"],"title":"Selection Sort : Swift"},{"categories":["Gist"],"date":"June 23, 2023","permalink":"https://mahigarg.github.io/gists/dutch-national-flag-swift/","section":"gists","summary":"The Dutch National Flag algorithm is a sorting algorithm that partitions an array into three sections: elements less than a given pivot, elements equal to the pivot, and elements greater than the pivot. In Swift, we can implement this algorithm by maintaining three pointers and swapping elements accordingly. The time complexity of the Dutch National Flag algorithm is O(n), where n is the number of elements in the array. It is an efficient algorithm for sorting arrays with a limited range of values, like sorting colors or other categorical data.\n","tags":["Programming-Basics"],"title":"Dutch National Flag : Sort Int Array of 0, 1 and 2 : Swift"},{"categories":["Gist"],"date":"June 20, 2023","permalink":"https://mahigarg.github.io/gists/list-swiftui/","section":"gists","summary":"In SwiftUI, the List is a powerful tool for creating neat and organized scrolling lists in apps. Imagine it as a virtual scrollable sheet of paper where you can display various items, like names, messages, or to-do tasks. It automatically adjusts its content, so you don\u0026rsquo;t need to worry about updating the list when things change. Whether you want to showcase a bunch of contacts or a menu with different options, List makes it simple and user-friendly. Users can smoothly scroll through the content, making it easy for them to find and interact with the information you present.\n","tags":["SwiftUI"],"title":"List: SwiftUI"},{"categories":["Blog"],"date":"June 16, 2023","permalink":"https://mahigarg.github.io/blogs/if-let-in-swift/","section":"blogs","summary":"if let - A Concise Way to Handle Optionals Introduction: Swift is known for its safety and strong typing, and one of its most powerful features is its handling of optionals. Optionals allow developers to express the possibility of a value being absent, preventing runtime crashes due to nil values. One of the key constructs used in Swift to work with optionals is the if let statement. In this blog, we will explore how if let can make your code cleaner and safer by safely unwrapping optionals in a concise manner.\nUnderstanding Optionals in Swift: Before diving into the if let statement, let\u0026rsquo;s quickly review optionals in Swift. An optional is a type that can either hold a value or be nil. It is represented by appending a question mark \u0026lsquo;?\u0026rsquo; after the type. For example, String? represents an optional String.\nHandling Optionals using if let:\nThe if let statement in Swift allows you to conditionally bind the optional to a non-optional temporary variable within the scope of the if block. It enables you to safely check for nil and simultaneously unwrap the optional\u0026rsquo;s value if it exists, avoiding the need for explicit unwrapping using if-else statements or forced unwrapping with the \u0026lsquo;!\u0026rsquo; operator.\nSyntax of if let: if let nonOptionalVar = optionalVar { // Code to be executed if optionalVar is not nil // nonOptionalVar is safely unwrapped and ready for use within this scope } else { // Code to be executed if optionalVar is nil } Example of if let: Let\u0026rsquo;s consider a simple example where we have an optional variable userName of type String?:\nlet userName: String? = \u0026#34;Mahi\u0026#34; if let name = userName { print(\u0026#34;Welcome, \\(name)\u0026#34;) } else { print(\u0026#34;No user name provided.\u0026#34;) } In this example, if userName contains a value (Mahi in this case), the if let statement binds the unwrapped value to the constant name, and the code inside the if block is executed. If userName is nil, the else block is executed.\nAdvantages of using if let: Safety: The if let statement ensures that you work with a valid, non-nil value. This significantly reduces the risk of runtime crashes caused by unwrapping nil values. Conciseness: if let provides a more concise way to handle optionals compared to traditional if-else or forced unwrapping approaches. Readability: The use of if let makes the code more readable and understandable as it clearly expresses the intent of safely unwrapping an optional. Scope: The unwrapped value is only available within the scope of the if block, ensuring that you won\u0026rsquo;t accidentally use it outside that scope, preventing potential bugs. Conclusion: The if let statement in Swift is a powerful and elegant way to handle optionals. It allows you to safely and concisely unwrap optional values, making your code safer and more readable. By leveraging if let, you can confidently work with optionals, avoiding the pitfalls of forced unwrapping and enhancing the overall robustness of your Swift codebase.\n","tags":["Swift"],"title":"if let in Swift"},{"categories":["Blog"],"date":"June 3, 2023","permalink":"https://mahigarg.github.io/blogs/lazy-property-in-swift/","section":"blogs","summary":"Swift\u0026rsquo;s lazy properties are a remarkable feature that allows developers to defer the initialization of a property until it is first accessed. This delayed initialization can greatly improve performance, especially when dealing with resource-intensive or time-consuming operations. In this blog, we\u0026rsquo;ll explore lazy properties in Swift, understand how they work, and dive into practical examples where they can significantly enhance the efficiency of your code.\nBasic Usage of Lazy Properties Lazy properties are declared using the lazy keyword. They are particularly useful when dealing with properties that are expensive to compute or require external resource allocation. Let\u0026rsquo;s consider a simple example of a DatabaseManager class that loads a database connection lazily.\nclass DatabaseManager { lazy var databaseConnection: DatabaseConnection = { // Perform resource-intensive database connection setup here let connection = DatabaseConnection() // Additional setup, if needed return connection }() } // Usage let manager = DatabaseManager() // At this point, the database connection is not yet initialized // It will be initialized and set up only when the `databaseConnection` property is accessed for the first time let connection = manager.databaseConnection Lazy Property with Complex Initialization Lazy properties can also be used when initializing complex objects. Consider a UserProfile class that fetches user data from a remote server. Using a lazy property, we can ensure that the data is fetched only when needed.\nclass UserProfile { lazy var userData: [String: Any] = { // Fetch user data from the server let data = fetchUserDataFromServer() // Process the data, if required // ... return data }() private func fetchUserDataFromServer() -\u0026gt; [String: Any] { // Simulate server request delay sleep(2) return [\u0026#34;name\u0026#34;: \u0026#34;Mahi Garg\u0026#34;, \u0026#34;age\u0026#34;: 30, \u0026#34;email\u0026#34;: \u0026#34;mahi7garg@gmail.com\u0026#34;] } } // Usage let profile = UserProfile() // The user data is not fetched yet // The data will be fetched and processed only when the `userData` property is accessed let data = profile.userData Lazy Property for Dependency Injection Lazy properties can be beneficial for dependency injection scenarios. Suppose we have a WeatherService class that requires a LocationManager instance to function. By using a lazy property, we can ensure that the LocationManager is only created when needed.\nclass WeatherService { lazy var locationManager: LocationManager = { let manager = LocationManager() // Additional setup, if needed return manager }() func fetchWeatherData() { let currentLocation = locationManager.getCurrentLocation() // Fetch weather data based on the current location // ... } } // Usage let weatherService = WeatherService() weatherService.fetchWeatherData() // The `locationManager` is not initialized until `getCurrentLocation()` is called Lazy Properties in Structs Lazy properties are not limited to classes; they can also be used in structs. Let\u0026rsquo;s look at an example of a Configuration struct with a lazy property for loading a configuration file.\nstruct Configuration { lazy var configDictionary: [String: Any] = { // Load configuration data from file let data = loadConfigurationFromFile() // Parse and process data, if needed // ... return data }() private func loadConfigurationFromFile() -\u0026gt; [String: Any] { // Simulate file loading delay sleep(1) return [\u0026#34;apiKey\u0026#34;: \u0026#34;your_api_key\u0026#34;, \u0026#34;themeColor\u0026#34;: \u0026#34;blue\u0026#34;] } } // Usage let config = Configuration() // The configuration data is not loaded until the `configDictionary` property is accessed let apiKey = config.configDictionary[\u0026#34;apiKey\u0026#34;] as? String Conclusion Lazy properties in Swift offer a powerful way to delay the initialization of properties until they are first accessed. By leveraging lazy properties, you can improve the efficiency of your code, especially when dealing with resource-heavy or time-consuming operations. Whether you\u0026rsquo;re fetching data from servers, initializing complex objects, or managing dependencies, lazy properties provide an elegant solution to optimize your Swift code.\nIntegrate lazy properties into your projects to achieve better performance and responsiveness, ensuring that you allocate resources only when they are genuinely needed. Embrace the efficiency that lazy properties bring to your Swift development endeavors, and elevate the overall quality and responsiveness of your applications. Happy coding!\n","tags":["Swift"],"title":"Lazy Property in Swift"},{"categories":["Blog"],"date":"May 21, 2023","permalink":"https://mahigarg.github.io/blogs/swift-functions-single-and-multiple-value-returns/","section":"blogs","summary":"In Swift, functions are the building blocks of code that encapsulate logic and perform specific tasks. They can return values to the caller, either as a single value or as multiple values using tuples. In this blog, we\u0026rsquo;ll explore how Swift functions can efficiently return single and multiple values, and how these powerful features can improve code organization and enhance code reuse.\nReturning a Single Value Swift functions can return a single value of any type, making them ideal for encapsulating logic and computing results that need to be passed back to the caller.\nfunc calculateSum(of a: Int, and b: Int) -\u0026gt; Int { return a + b } let result = calculateSum(of: 5, and: 7) print(\u0026#34;The sum is: \\(result)\u0026#34;) Returning Multiple Values with Tuples Swift functions can also return multiple values using tuples. Tuples are lightweight data structures that group multiple values together.\nfunc findMinMax(in array: [Int]) -\u0026gt; (min: Int, max: Int) { var min = Int.max var max = Int.min for num in array { if num \u0026lt; min { min = num } if num \u0026gt; max { max = num } } return (min, max) } let numbers = [10, 3, 7, 25, 1, 15] let result = findMinMax(in: numbers) print(\u0026#34;Minimum: \\(result.min), Maximum: \\(result.max)\u0026#34;) Named Tuples for Clarity Named tuples add clarity to multiple value returns, making the code self-documenting and easy to understand.\nfunc getUserInfo() -\u0026gt; (name: String, age: Int, email: String) { let name = \u0026#34;John Doe\u0026#34; let age = 30 let email = \u0026#34;john.doe@example.com\u0026#34; return (name, age, email) } let userInfo = getUserInfo() print(\u0026#34;Name: \\(userInfo.name), Age: \\(userInfo.age), Email: \\(userInfo.email)\u0026#34;) Ignoring Tuple Values Sometimes, you may not need all the values returned by a function. In such cases, you can use an underscore (_) to ignore specific tuple values.\nfunc divide(_ dividend: Double, by divisor: Double) -\u0026gt; (quotient: Double, remainder: Double) { let quotient = dividend / divisor let remainder = dividend.truncatingRemainder(dividingBy: divisor) return (quotient, remainder) } let divisionResult = divide(25, by: 4) print(\u0026#34;Quotient: \\(divisionResult.quotient), Remainder: \\(divisionResult.remainder)\u0026#34;) Optional Return Values Swift functions can also return optional values, which may be nil in certain cases.\nfunc findIndex(of element: Int, in array: [Int]) -\u0026gt; Int? { for (index, value) in array.enumerated() { if value == element { return index } } return nil } let numbers = [10, 3, 7, 25, 1, 15] if let index = findIndex(of: 7, in: numbers) { print(\u0026#34;Element found at index \\(index)\u0026#34;) } else { print(\u0026#34;Element not found.\u0026#34;) } Conclusion Swift functions are powerful tools that enable code encapsulation and promote code reuse. By efficiently returning single and multiple values, Swift functions become even more versatile and capable of solving various programming challenges.\nWhether you need to perform calculations, search for elements, or return data structures with multiple values, Swift functions can handle it all. With single value returns, you can easily compute and pass back results, while with multiple value returns using tuples, you can efficiently bundle related data together.\nBy incorporating these Swift function features into your projects, you can write more organized, reusable, and efficient code, streamlining your development process and enhancing code readability. Happy coding!\n","tags":["Swift"],"title":"Swift Functions: Single and Multiple Value Returns"},{"categories":["Blog"],"date":"May 6, 2023","permalink":"https://mahigarg.github.io/blogs/switch-statement-in-swift/","section":"blogs","summary":"Swift\u0026rsquo;s powerful switch statement is a versatile control flow construct that enables developers to handle complex conditions and pattern matching with ease. Far beyond the conventional use cases, the switch statement in Swift boasts several features that make it an indispensable tool in every developer\u0026rsquo;s toolkit. In this blog, we will explore the various facets of Swift\u0026rsquo;s switch statement, discuss its unique capabilities, and delve into real-world examples to illustrate its flexibility and efficiency.\nThe Basics of Switch At its core, a switch statement allows you to evaluate a value against multiple cases and execute the corresponding code block when a match is found. Let\u0026rsquo;s start with a simple example of using a switch statement to handle different days of the week.\nlet day = \u0026#34;Tuesday\u0026#34; switch day { case \u0026#34;Monday\u0026#34;: print(\u0026#34;It\u0026#39;s Monday, the week just started!\u0026#34;) case \u0026#34;Tuesday\u0026#34;: print(\u0026#34;It\u0026#39;s Tuesday, getting into the flow.\u0026#34;) case \u0026#34;Wednesday\u0026#34;: print(\u0026#34;It\u0026#39;s Wednesday, halfway through the week.\u0026#34;) default: print(\u0026#34;It\u0026#39;s another day of the week.\u0026#34;) } Pattern Matching Switch statements in Swift go beyond simple value comparisons; they offer powerful pattern matching capabilities. For instance, you can use ranges to handle different scenarios, such as grading a student\u0026rsquo;s score.\nlet score = 85 switch score { case 0..\u0026lt;60: print(\u0026#34;You failed the exam.\u0026#34;) case 60..\u0026lt;70: print(\u0026#34;You got a D.\u0026#34;) case 70..\u0026lt;80: print(\u0026#34;You got a C.\u0026#34;) case 80..\u0026lt;90: print(\u0026#34;You got a B.\u0026#34;) case 90...100: print(\u0026#34;Congratulations! You got an A!\u0026#34;) default: print(\u0026#34;Invalid score.\u0026#34;) } Compound Cases and Where Clause Swift\u0026rsquo;s switch statement allows you to combine multiple cases into a single block using a comma. Moreover, you can utilize the where clause to add additional conditions within a case.\nlet age = 25 switch age { case 0..\u0026lt;18: print(\u0026#34;You are a minor.\u0026#34;) case 18..\u0026lt;21, 21..\u0026lt;25 where age % 2 == 0: print(\u0026#34;You are a young adult.\u0026#34;) case 21..\u0026lt;25 where age % 2 != 0: print(\u0026#34;You are a unique young adult.\u0026#34;) default: print(\u0026#34;You are an adult.\u0026#34;) } Switch with Enums Swift\u0026rsquo;s switch statement seamlessly integrates with enums, making it an excellent choice for handling various enum cases.\nenum TransportMode { case car(speed: Double) case bicycle(speed: Double) case walking } let currentMode = TransportMode.car(speed: 80.0) switch currentMode { case .car(let speed) where speed \u0026gt; 100: print(\u0026#34;You are driving really fast!\u0026#34;) case .car, .bicycle: print(\u0026#34;You are using a vehicle.\u0026#34;) case .walking: print(\u0026#34;You are walking.\u0026#34;) } Conclusion Swift\u0026rsquo;s switch statement is a versatile and powerful control flow construct that allows developers to handle complex scenarios with ease. From basic value comparisons to intricate pattern matching with ranges and where clauses, the switch statement offers flexibility and readability in managing control flow in Swift code.\nWhether you\u0026rsquo;re handling days of the week, grading scores, dealing with enums, or combining cases, the switch statement empowers you to write concise and efficient code. Its unique features make it an indispensable tool for any developer looking to streamline their control flow logic.\nSo, go ahead and embrace the elegance of Swift\u0026rsquo;s switch statement in your projects, and witness how it simplifies your code, making it more expressive and maintainable. Happy coding!\n","tags":["Swift"],"title":"Switch Statement in Swift"},{"categories":["Blog"],"date":"April 25, 2023","permalink":"https://mahigarg.github.io/blogs/closures-swift/","section":"blogs","summary":"Closures are a powerful feature of the Swift programming language that allows you to write code that can be passed around and executed at a later time. They are self-contained blocks of functionality.\nClosures are commonly used in Swift to perform tasks like sorting and filtering collections and for handling asynchronous tasks.\nSyntax:\nA closure is defined using curly braces { } and can take in one or more arguments, and returns a value. Here’s a basic syntax of a closure:\n{ (params) -\u0026gt; return type in // Statement } params — any value passed to the closure returnType — specifies the type of value returned by the closure in (optional) — used to separate parameters/returnType from the closure body Statement — code to be executed. Closures need not have the first 3 always. Find the below examples supporting the statement.\nvar sayHi = { print(\u0026#34;Hey!\u0026#34;) } // call the closure sayHi() // output is Hey! This example of closure prints a string. It doesn’t require any parameters. It doesn’t return anything. It just has a single line of code to execute.\nNow let us see other examples of closure where we have either a parameter or a return type.\nlet sayHi = { (name: String) in print(\u0026#34;Hey!, \\(name).\u0026#34;) } // closure call sayHi(\u0026#34;Mahi\u0026#34;) // output is Hey!, Mahi let taskCompleted = { ()-\u0026gt; String in return \u0026#34;Bravo You Are Done!\u0026#34; } // closure call print(taskCompleted()) // output is Bravo You Are Done! Hope you have understood what is closure. How to write closure in Swift. Now let us move to the usage of closure in Swift.\nNow let us consider a block of code that needs to be executed after the method has completed its task. Let us have a look below for example.\nfunc add(first: Int, second: Int, completion: (Int) -\u0026gt; String) { let sum = first + second print(completion(sum)) } add(first: 4, second: 56) { result in return \u0026#34;result is \\(result)\u0026#34; } // output is result is 60 add(first: 4, second: 56) { result in return \u0026#34;sum is \\(result)\u0026#34; } // output is sum is 60 Here method add takes 2 integers and 1 closure as arguments. It performs the sum of 2 numbers. After the addition is done it calls the closure to print the result according to the code written in the closure.\nHere, the first method call defines the closure to return the string “result is 60” while the second return the string “sum is 60”. So we can conclude that closure also gives the power to the method to execute a different set of code depending on where it is called.\n","tags":["Swift"],"title":"Closures: Swift"},{"categories":["Blog"],"date":"April 20, 2023","permalink":"https://mahigarg.github.io/blogs/ternary-conditional-operator-in-swift/","section":"blogs","summary":"Swift\u0026rsquo;s Ternary Conditional Operator is a concise and powerful tool that allows developers to write compact conditional expressions. It provides a more concise alternative to traditional if-else statements, making code more readable and expressive. In this blog, we\u0026rsquo;ll explore the Ternary Conditional Operator in Swift, understand its syntax and usage, and explore real-world examples to illustrate its efficiency and elegance.\nThe Basics of the Ternary Conditional Operator The Ternary Conditional Operator, represented by ? :, is a shorthand way of expressing conditional statements. It has the following syntax:\ncondition ? trueExpression : falseExpression If condition evaluates to true, the trueExpression is executed; otherwise, the falseExpression is executed.\nBasic Usage Example Let\u0026rsquo;s start with a simple example of using the Ternary Conditional Operator to determine if a number is even or odd.\nlet number = 7 let result = number % 2 == 0 ? \u0026#34;even\u0026#34; : \u0026#34;odd\u0026#34; print(\u0026#34;The number is \\(result).\u0026#34;) Handling Optionals The Ternary Conditional Operator is especially useful for working with optionals. It allows us to provide default values when an optional is nil.\nlet optionalName: String? = \u0026#34;John Doe\u0026#34; let displayName = optionalName != nil ? optionalName! : \u0026#34;Anonymous\u0026#34; print(\u0026#34;User\u0026#39;s Display Name: \\(displayName)\u0026#34;) Nested Ternary Operators Ternary operators can be nested to handle multiple conditions. However, it is essential to use them judiciously to maintain code readability.\nlet age = 25 let accessLevel = age \u0026gt;= 18 ? (age \u0026gt;= 21 ? \u0026#34;Full access\u0026#34; : \u0026#34;Limited access\u0026#34;) : \u0026#34;No access\u0026#34; print(\u0026#34;Access level: \\(accessLevel)\u0026#34;) Assigning Values Ternary operators can also be used to conditionally assign values to variables.\nlet isAdmin = true let accessCode = isAdmin ? \u0026#34;admin123\u0026#34; : \u0026#34;guest456\u0026#34; print(\u0026#34;Access Code: \\(accessCode)\u0026#34;) Coalescing Operator vs. Ternary Operator The Ternary Conditional Operator can sometimes be used interchangeably with the nil-coalescing operator (??). However, they serve different purposes and have specific use cases.\nlet optionalNumber: Int? = nil let number = optionalNumber ?? 0 // Equivalent Ternary Operator: // let number = optionalNumber != nil ? optionalNumber! : 0 print(\u0026#34;Number: \\(number)\u0026#34;) Conclusion Swift\u0026rsquo;s Ternary Conditional Operator is a valuable tool for writing concise and readable conditional expressions. It provides an efficient way to streamline code and handle conditionals with elegance and clarity. From basic usage to handling optionals and nested expressions, the Ternary Conditional Operator offers a versatile and expressive approach to conditional logic.\nHowever, it is crucial to use the Ternary Conditional Operator judiciously and strike a balance between conciseness and readability. In some cases, traditional if-else statements or the nil-coalescing operator may be more appropriate.\nBy embracing the Ternary Conditional Operator in your Swift projects, you can enhance code readability, simplify expressions, and make your code more elegant and expressive. Happy coding!\n","tags":["Swift"],"title":"Ternary Conditional Operator in Swift"},{"categories":["Blog"],"date":"April 17, 2023","permalink":"https://mahigarg.github.io/blogs/enums-in-swift/","section":"blogs","summary":"When it comes to writing clean, maintainable, and bug-free code, Swift provides a powerful feature called enums or enumerations. Enums are a fundamental data type that allows developers to define a set of related values in a type-safe manner. They play a significant role in improving code readability, eliminating runtime errors, and enhancing overall code quality. In this blog, we\u0026rsquo;ll delve into the world of enums in Swift and explore how they can level up your coding game with some practical examples.\nWhat are Enums? Enums, short for enumerations, are a way to define a group of related values in Swift. With enums, you can define a finite set of possible values that a variable can take, and Swift ensures that only those predefined values can be assigned to the variable. This type safety helps catch errors at compile-time, making your code more robust.\nDeclaring Enums Let\u0026rsquo;s start with a simple example of an enum representing different types of fruits:\nenum Fruit { case apple case banana case orange case mango } In this example, we\u0026rsquo;ve declared an enum called Fruit with four cases: apple, banana, orange, and mango. Each case represents a distinct value that a variable of type Fruit can hold.\nUsing Enums Now that we have our Fruit enum, let\u0026rsquo;s see how we can use it in our code:\nvar favoriteFruit = Fruit.apple print(\u0026#34;My favorite fruit is \\(favoriteFruit)\u0026#34;) favoriteFruit = .mango print(\u0026#34;I changed my mind, now my favorite fruit is \\(favoriteFruit)\u0026#34;) The output will be:\nMy favorite fruit is apple I changed my mind, now my favorite fruit is mango As you can see, we can create a variable favoriteFruit of type Fruit and assign it a value from the enum cases. Once a variable is assigned an enum value, it can only be changed to another value from the same enum.\nAssociated Values Enums can also have associated values, which allow us to attach additional information to each case. This feature is particularly useful when a case needs to carry some data along with it. Let\u0026rsquo;s take the example of a Measurement enum:\nenum Measurement { case length(Double) case weight(Double) case temperature(Double) } Here, we\u0026rsquo;ve defined three cases: length, weight, and temperature, and each case has an associated Double value representing the measurement in meters, kilograms, and degrees Celsius, respectively.\nEnum with Associated Values Example func describe(measurement: Measurement) -\u0026gt; String { switch measurement { case let .length(value): return \u0026#34;The length is \\(value) meters.\u0026#34; case let .weight(value): return \u0026#34;The weight is \\(value) kilograms.\u0026#34; case let .temperature(value): return \u0026#34;The temperature is \\(value) degrees Celsius.\u0026#34; } } let lengthMeasurement = Measurement.length(5.3) let weightMeasurement = Measurement.weight(68.2) let temperatureMeasurement = Measurement.temperature(25.0) print(describe(measurement: lengthMeasurement)) print(describe(measurement: weightMeasurement)) print(describe(measurement: temperatureMeasurement)) Output:\nThe length is 5.3 meters. The weight is 68.2 kilograms. The temperature is 25.0 degrees Celsius. Raw Values In addition to associated values, enums in Swift can also have raw values. Raw values are pre-defined values that are implicitly assigned to each enum case. Raw values must have the same data type, and each case\u0026rsquo;s raw value must be unique within the enum. Raw values are particularly useful when working with external data formats or APIs that expect specific values.\nHere\u0026rsquo;s an example of an enum representing the days of the week using raw values:\nenum Weekday: String { case sunday = \u0026#34;Sun\u0026#34; case monday = \u0026#34;Mon\u0026#34; case tuesday = \u0026#34;Tue\u0026#34; case wednesday = \u0026#34;Wed\u0026#34; case thursday = \u0026#34;Thu\u0026#34; case friday = \u0026#34;Fri\u0026#34; case saturday = \u0026#34;Sat\u0026#34; } Enum with Raw Values Example let today = Weekday.friday print(\u0026#34;Today is \\(today.rawValue)\u0026#34;) Output:\nToday is Fri Iterating over Enum Cases Sometimes, you may need to iterate over all the cases of an enum, especially when you have a large number of cases or when you\u0026rsquo;re working with generic code. Swift allows you to do this using the CaseIterable protocol.\nenum Direction: CaseIterable { case north case south case east case west } for direction in Direction.allCases { print(direction) } Output:\nnorth south east west Conclusion Enums in Swift are a powerful tool for creating well-structured, type-safe code. By using enums, you can represent a fixed set of related values, attach additional data to each case, and handle different scenarios more elegantly. Whether you\u0026rsquo;re working with UI elements, API responses, or any other use case, enums will undoubtedly enhance your code\u0026rsquo;s clarity and maintainability.\nSo, the next time you find yourself dealing with a set of related values, consider reaching for enums to make your Swift code more expressive and robust! Happy coding! 🚀\n","tags":["Swift"],"title":"Enums in Swift"},{"categories":["Blog"],"date":"April 6, 2023","permalink":"https://mahigarg.github.io/blogs/structs-in-swift/","section":"blogs","summary":"When it comes to designing data structures in Swift, one of the fundamental building blocks you\u0026rsquo;ll encounter is the struct. A struct, short for structure, is a versatile and lightweight data type that allows you to encapsulate related properties and behaviors together. In this blog, we\u0026rsquo;ll delve into the world of structs in Swift, explore their features, benefits, and demonstrate how they can be used to create robust and maintainable code with practical examples.\nWhat are Structs? In Swift, a struct is a value type that enables you to define a blueprint for creating custom data types. It can include properties to store values and methods to perform actions related to those values. Unlike classes, structs are value types, meaning they are copied when passed around in code, rather than referenced. This behavior can have significant implications for your program\u0026rsquo;s memory management and can be very advantageous in certain scenarios.\nDeclaring Structs Let\u0026rsquo;s start by creating a simple struct to represent a 2D point:\nstruct Point { var x: Double var y: Double } In this example, we\u0026rsquo;ve defined a struct called Point with two properties: x and y, both of type Double. Now, we can create instances of this struct to represent specific points:\nvar origin = Point(x: 0.0, y: 0.0) var pointA = Point(x: 3.5, y: 2.0) Accessing Struct Properties You can access the properties of a struct using dot notation:\nprint(\u0026#34;The x-coordinate of point A is \\(pointA.x)\u0026#34;) print(\u0026#34;The y-coordinate of point A is \\(pointA.y)\u0026#34;) Struct Methods Structs can also have methods, just like classes. Let\u0026rsquo;s add a method to our Point struct to calculate the distance between two points:\nstruct Point { var x: Double var y: Double func distance(to otherPoint: Point) -\u0026gt; Double { let xDistance = self.x - otherPoint.x let yDistance = self.y - otherPoint.y return (xDistance * xDistance + yDistance * yDistance).squareRoot() } } Using Struct Methods let pointB = Point(x: 5.0, y: 4.0) let distance = pointA.distance(to: pointB) print(\u0026#34;The distance between point A and point B is \\(distance)\u0026#34;) Mutating Methods If you want a method to modify the struct\u0026rsquo;s properties, you\u0026rsquo;ll need to mark the method as mutating. Let\u0026rsquo;s add a method to our Point struct that moves the point by a given offset:\nstruct Point { var x: Double var y: Double mutating func moveBy(x deltaX: Double, y deltaY: Double) { x += deltaX y += deltaY } } Using Mutating Methods var pointC = Point(x: 1.0, y: 1.0) print(\u0026#34;Point C before moving: (\\(pointC.x), \\(pointC.y))\u0026#34;) pointC.moveBy(x: 2.5, y: 3.5) print(\u0026#34;Point C after moving: (\\(pointC.x), \\(pointC.y))\u0026#34;) Structs and Immutability Unlike classes, which are reference types, structs are value types and have inherent immutability. This means that by default, you cannot modify the properties of a struct instance declared as a constant (using let). To make a struct mutable, you need to use the mutating keyword with methods that modify its properties, as shown in the previous example.\nPractical Use Case: Currency Conversion Let\u0026rsquo;s consider a practical use case for a struct. We\u0026rsquo;ll create a CurrencyConverter struct that holds the exchange rates for different currencies and provides a method to convert amounts between them:\nstruct CurrencyConverter { var exchangeRates: [String: Double] // e.g., [\u0026#34;USD\u0026#34;: 1.0, \u0026#34;EUR\u0026#34;: 0.85, \u0026#34;JPY\u0026#34;: 109.5] func convert(amount: Double, from sourceCurrency: String, to targetCurrency: String) -\u0026gt; Double? { guard let sourceRate = exchangeRates[sourceCurrency], let targetRate = exchangeRates[targetCurrency] else { return nil } return amount * (targetRate / sourceRate) } } Using CurrencyConverter let converter = CurrencyConverter(exchangeRates: [\u0026#34;USD\u0026#34;: 1.0, \u0026#34;EUR\u0026#34;: 0.85, \u0026#34;JPY\u0026#34;: 109.5]) let amountInUSD = 100.0 if let amountInEUR = converter.convert(amount: amountInUSD, from: \u0026#34;USD\u0026#34;, to: \u0026#34;EUR\u0026#34;) { print(\u0026#34;\\(amountInUSD) USD is equal to \\(amountInEUR) EUR.\u0026#34;) } else { print(\u0026#34;Currency conversion failed.\u0026#34;) } Conclusion Structs are a powerful tool in Swift for building lightweight, flexible, and maintainable data types. They allow you to encapsulate related data and behavior, promote immutability by default, and can be particularly useful when working with value semantics or scenarios where copy-on-write behavior is desirable. By understanding the nuances of structs and incorporating them into your Swift code, you can make your applications more efficient, organized, and robust.\nIn this blog, we\u0026rsquo;ve covered the basics of structs and demonstrated how to create, use, and benefit from them in your Swift projects. Whether you\u0026rsquo;re working on iOS apps, macOS applications, or server-side projects, structs will undoubtedly play a significant role in improving your code quality and overall development experience.\nSo, the next time you find yourself in need of a lightweight, value-based data structure, think of structs as your go-to choice for building clean and elegant solutions! Happy coding! 🚀\n","tags":["Swift"],"title":"Structs in Swift"},{"categories":["Blog"],"date":"April 2, 2023","permalink":"https://mahigarg.github.io/blogs/tuple-in-swift/","section":"blogs","summary":"In Swift, tuples are lightweight data structures that provide a simple and elegant way to group multiple values together. They offer great versatility and are widely used in various scenarios to pass around related pieces of data effortlessly. In this blog, we\u0026rsquo;ll explore the power of tuples in Swift, understand their syntax and usage, and dive into real-world examples to showcase their flexibility and usefulness.\nCreating and Accessing Tuples Let\u0026rsquo;s start with the basics of creating and accessing tuples. A tuple is defined by enclosing multiple values within parentheses. The values can be of different types.\nlet personInfo = (\u0026#34;Mahi Garg\u0026#34;, 30, \u0026#34;mahi7garg@gmail.com\u0026#34;) To access individual elements of a tuple, you can use dot notation followed by the element\u0026#39;s index. swift Copy code let name = personInfo.0 let age = personInfo.1 let email = personInfo.2 print(\u0026#34;Name: \\(name), Age: \\(age), Email: \\(email)\u0026#34;) Named Tuples Named tuples add clarity and self-documentation to your code by assigning labels to each element. You can create a named tuple using the following syntax:\nlet personInfo = (name: \u0026#34;Garg\u0026#34;, age: 30, email: \u0026#34;mahi7garg@gmail.com\u0026#34;) Now, you can access elements using their assigned names: swift Copy code let name = personInfo.name let age = personInfo.age let email = personInfo.email print(\u0026#34;Name: \\(name), Age: \\(age), Email: \\(email)\u0026#34;) Returning Multiple Values from Functions Tuples are especially useful for returning multiple values from a function in a single return statement. Let\u0026rsquo;s see an example of a function that calculates the minimum and maximum elements of an array.\nfunc findMinMax(in array: [Int]) -\u0026gt; (min: Int, max: Int) { var min = Int.max var max = Int.min for num in array { if num \u0026lt; min { min = num } if num \u0026gt; max { max = num } } return (min, max) } let numbers = [10, 3, 7, 25, 1, 15] let result = findMinMax(in: numbers) print(\u0026#34;Minimum: \\(result.min), Maximum: \\(result.max)\u0026#34;) Tuples with Pattern Matching Swift\u0026rsquo;s pattern matching capabilities can be seamlessly combined with tuples to create more expressive code. Consider a simple function that checks if a point lies within a given rectangle.\nfunc isPointInside(point: (x: Int, y: Int), rect: (x: Int, y: Int, width: Int, height: Int)) -\u0026gt; Bool { return (rect.x...rect.x + rect.width).contains(point.x) \u0026amp;\u0026amp; (rect.y...rect.y + rect.height).contains(point.y) } let point = (x: 15, y: 10) let rectangle = (x: 10, y: 5, width: 20, height: 15) if isPointInside(point: point, rect: rectangle) { print(\u0026#34;The point lies inside the rectangle.\u0026#34;) } else { print(\u0026#34;The point is outside the rectangle.\u0026#34;) } Conclusion Tuples in Swift are powerful and lightweight data structures that enable developers to group multiple values together effortlessly. Whether you need to bundle related pieces of data, return multiple values from functions, or leverage pattern matching, tuples offer an elegant and expressive solution.\nFrom basic creation and accessing to the more advanced named tuples and pattern matching, Swift\u0026rsquo;s tuples provide great flexibility and readability in your code. Embrace the simplicity and versatility of tuples in your Swift projects, and experience how they simplify your data handling and enhance your code organization. Happy coding!\n","tags":["Swift"],"title":"Tuple in Swift"},{"categories":["Blog"],"date":"March 26, 2023","permalink":"https://mahigarg.github.io/blogs/classes-in-swift/","section":"blogs","summary":"In the world of Swift, classes form the cornerstone of object-oriented programming (OOP). They provide a powerful mechanism to create blueprints for objects, allowing you to encapsulate data and behaviors together in a structured manner. In this blog, we\u0026rsquo;ll dive into the world of classes in Swift, explore their features, benefits, and demonstrate how they can be used to build sophisticated and reusable code with practical examples.\nWhat are Classes? In Swift, a class is a reference type that defines a blueprint for creating objects. Unlike structs, which are value types, classes are passed around by reference, meaning multiple variables can point to the same underlying instance. Classes support inheritance, enabling you to create hierarchies of related objects, and they play a pivotal role in achieving abstraction and polymorphism, two essential principles of OOP.\nDeclaring Classes Let\u0026rsquo;s start by creating a simple class to represent a Person:\nclass Person { var name: String var age: Int init(name: String, age: Int) { self.name = name self.age = age } func sayHello() { print(\u0026#34;Hello, my name is \\(name) and I am \\(age) years old.\u0026#34;) } } In this example, we\u0026rsquo;ve defined a class called Person with two properties: name and age, along with an initializer to set their initial values. The class also contains a method sayHello() to introduce the person.\nCreating Instances of a Class Now that we have our Person class, let\u0026rsquo;s create instances of it:\nlet john = Person(name: \u0026#34;John\u0026#34;, age: 30) let jane = Person(name: \u0026#34;Jane\u0026#34;, age: 25) Accessing Properties and Calling Methods We can access the properties and call methods of the instances using dot notation:\nprint(john.name) // Output: John print(jane.age) // Output: 25 john.sayHello() // Output: Hello, my name is John and I am 30 years old. jane.sayHello() // Output: Hello, my name is Jane and I am 25 years old. Class Inheritance One of the key features of classes is inheritance, which allows you to create a new class based on an existing one, inheriting its properties and methods. Let\u0026rsquo;s create a subclass Student that inherits from the Person class and adds an additional property:\nclass Student: Person { var school: String init(name: String, age: Int, school: String) { self.school = school super.init(name: name, age: age) } override func sayHello() { print(\u0026#34;Hello, my name is \\(name), I am \\(age) years old, and I study at \\(school).\u0026#34;) } } Creating Instances of a Subclass let alice = Student(name: \u0026#34;Alice\u0026#34;, age: 22, school: \u0026#34;ABC University\u0026#34;) alice.sayHello() // Output: Hello, my name is Alice, I am 22 years old, and I study at ABC University. Access Control Swift provides access control to restrict the visibility of properties, methods, and other components of a class. There are three access levels: public, internal, and private. The default access level is internal, which means the components are accessible within the same module. Let\u0026rsquo;s add access control to our Person class:\nclass Person { private var name: String internal var age: Int init(name: String, age: Int) { self.name = name self.age = age } internal func sayHello() { print(\u0026#34;Hello, my name is \\(name) and I am \\(age) years old.\u0026#34;) } } Conclusion Classes are a powerful tool in Swift for building complex, hierarchical, and reusable code structures. They allow you to create blueprints for objects, promote code organization through inheritance and encapsulation, and enable the use of essential OOP principles such as abstraction and polymorphism.\nIn this blog, we\u0026rsquo;ve covered the basics of classes in Swift and demonstrated how to create, use, and benefit from them in your Swift projects. Whether you\u0026rsquo;re working on iOS apps, macOS applications, or any other Swift-based project, classes will undoubtedly play a significant role in designing efficient and maintainable solutions.\nBy understanding the nuances of classes and incorporating them into your Swift code, you can create robust, flexible, and scalable applications. So, the next time you find yourself building a complex data model, creating an inheritance hierarchy, or leveraging OOP principles, consider Swift classes as your go-to choice for building powerful and expressive solutions! Happy coding! 🚀\n","tags":["Swift"],"title":"Classes in Swift"},{"categories":["Blog"],"date":"March 19, 2023","permalink":"https://mahigarg.github.io/blogs/navigationview-in-swiftui/","section":"blogs","summary":"Navigation involves moving between different screens or views within an app. SwiftUI provides a navigation view hierarchy that allows users to navigate between different views seamlessly. The NavigationView is the container view that manages the navigation stack and provides a NavigationBar at the top to facilitate navigation.\nNavigationView NavigationView serves as the navigation container, hosting a hierarchy of views. At the top of the screen, it presents a navigation bar, which typically includes a back button for easy navigation to the previous view. You can also customize the appearance and behavior of the navigation bar to match your app\u0026rsquo;s style.\nWe will understand how to implement NavigationView and it various modifier. For same let us take an example of code and walk through it step by step.\nImplement NavigationView struct NavigationInSwiftUI: View { var body: some View { NavigationView { ScrollView(.vertical) { NavigationLink(\u0026#34;Navigaton Link\u0026#34;, destination: navigationPage) Text(\u0026#34;Home View\u0026#34;) } .navigationTitle(\u0026#34; Navigation Title\u0026#34;) .navigationBarTitleDisplayMode(.automatic) .navigationBarHidden(false) .navigationBarItems(leading: EditButton(), trailing: Image(systemName: \u0026#34;person.fill\u0026#34;)) } } } var navigationPage: some View { ZStack { Color.purple.edgesIgnoringSafeArea(.all) Text(\u0026#34;Hello World\u0026#34;) } .navigationTitle(\u0026#34; Navigated Page\u0026#34;) } Set Up Navigation Wrap your starting view (usually HomeView) with a NavigationView to set up the navigation hierarchy\nstruct NavigationInSwiftUI: View { var body: some View { NavigationView { ScrollView(.vertical) { Text(\u0026#34;Home View\u0026#34;) } } } } Create NavigationLink Within the HomeView, create a NavigationLink to navigate to the DetailView. Here, in NavigationLink(\u0026quot;Navigaton Link\u0026quot;, destination: navigationPage) Navigation Link is title displayed and destination i.e. navigationPage is the view to which user will navigate on taping Navigation Link\nstruct NavigationInSwiftUI: View { var body: some View { NavigationView { ScrollView(.vertical) { NavigationLink(\u0026#34;Navigaton Link\u0026#34;, destination: navigationPage) Text(\u0026#34;Home View\u0026#34;) } } } } var navigationPage: some View { ZStack { Color.purple.edgesIgnoringSafeArea(.all) Text(\u0026#34;Second Page\u0026#34;) } } NavigationBar Navigation View give navigation Bar as one of its characterstic, where title, left right navigation button can be configured.\nstruct NavigationInSwiftUI: View { var body: some View { NavigationView { ScrollView(.vertical) { NavigationLink(\u0026#34;Navigaton Link\u0026#34;, destination: navigationPage) Text(\u0026#34;Home View\u0026#34;) } } .navigationTitle(\u0026#34; Navigation Title\u0026#34;) .navigationBarTitleDisplayMode(.automatic) .navigationBarHidden(false) .navigationBarItems(leading: EditButton(), trailing: Image(systemName: \u0026#34;person.fill\u0026#34;)) } } navigationTitle navigationTitle will give title to view. 3 display modes for the navigation can be used via navigationBarTitleDisplayMode. These 3 modes are .automatic, .inline and .large.\nnavigationBar navigationBarHidden can be used with true as a parameter to hide the navigationBar. This is used when multiple navigation screen is used under same navigation View and navigation bar need to be hidden for some of them.\nAlso, left and right buttons can be used and given as view like Image(systemName: \u0026quot;person.fill\u0026quot;) using navigationBarItems.\nConclusion NavigationView is a powerful tool that simplifies navigation and enhances the user experience. Now we learned how to create a smooth and intuitive navigation flow. With SwiftUI\u0026rsquo;s NavigationView, we can create engaging and user-friendly apps, guiding users through your content effortlessly. So, dive into your SwiftUI projects and start navigating with style using NavigationView!\n","tags":["SwiftUI"],"title":"NavigationView in SwiftUI"},{"categories":["Blog"],"date":"March 14, 2023","permalink":"https://mahigarg.github.io/blogs/dictionary-swift/","section":"blogs","summary":"Dictionaries in Swift provide a key-value pair mechanism for efficient data storage and retrieval. They are implemented using hash tables, allowing fast access and modification of values based on keys. Dictionaries support operations like adding, removing, and iterating over elements. With constant time complexity for most operations, dictionaries are a powerful tool for organizing and managing data in Swift programming.\nLet us explore syntax, usage, and various operations that can be performed on dictionay.\nCreating a Dictionary: In Swift, dictionaries are represented by the Dictionary\u0026lt;Key, Value\u0026gt; type, or simply [Key: Value]. Time complexity for creating an empty dictionary is O(1). Here\u0026rsquo;s how you can create an empty dictionary or initialize it with values:\n// Empty Dictionary var emptyDictionary: [String: Int] = [:] // Initializing a Dictionary var fruits = [\u0026#34;apple\u0026#34;: 3, \u0026#34;banana\u0026#34;: 5, \u0026#34;orange\u0026#34;: 2] Accessing and Modifying Values: You can access values in a dictionary using their corresponding keys. If the key exists, the value will be returned; otherwise, it will return nil. Time complexity for accessing and modifying values in an dictionary is O(1). Here\u0026rsquo;s an example:\nlet numberOfApples = fruits[\u0026#34;apple\u0026#34;] // returns 3 // Modifying values fruits[\u0026#34;banana\u0026#34;] = 10 Adding and Removing Elements: To add elements to a dictionary, you can assign a value to a specific key. If the key already exists, the value will be updated; otherwise, a new key-value pair will be added. Removing elements can be done using the removeValue(forKey:) method. Time complexity of adding and removing element in dictionary is O(1). However, in some cases, the complexity can be O(n) due to the need to resize the underlying hash table. Examples:\nfruits[\u0026#34;kiwi\u0026#34;] = 4 // Adding a new element fruits.removeValue(forKey: \u0026#34;orange\u0026#34;) // Removing an element Iterating over a Dictionary: Swift provides several ways to iterate over the elements in a dictionary. You can use a for-in loop to access each key-value pair, or you can iterate over keys or values separately using the keys and values properties. Iterating over a dictionary has a time complexity of O(n), where n is the number of key-value pairs in the dictionary. This is because iterating requires visiting each element once. Here\u0026rsquo;s an example:\nfor (fruit, quantity) in fruits { print(\u0026#34;There are \\(quantity) \\(fruit)s\u0026#34;) } for fruit in fruits.keys { print(fruit) } for quantity in fruits.values { print(quantity) } Checking for the Existence of Keys and Values: To check if a key or value exists in a dictionary, you can use the contains(where:) method or the keys.contains(:) and values.contains(:) properties. Checking for the existence of keys or values in a dictionary has an average time complexity of O(1). This is due to the efficient lookup mechanism provided by the hash table implementation. Here\u0026rsquo;s an example:\nif fruits.contains(where: { $0.key == \u0026#34;apple\u0026#34; }) { print(\u0026#34;Apple exists\u0026#34;) } if fruits.values.contains(5) { print(\u0026#34;There is a fruit with quantity 5\u0026#34;) } Dictionary Operations and Properties: Swift dictionaries provide various operations and properties to work with. Some notable ones include:\ncount: Returns the number of key-value pairs in the dictionary. isEmpty: Returns a Boolean value indicating whether the dictionary is empty. keys: Returns a collection containing all the keys in the dictionary. values: Returns a collection containing all the values in the dictionary. merge(_:uniquingKeysWith:): Merges the given dictionary with the current dictionary. filter(_:): Returns a new dictionary containing the key-value pairs that satisfy the given predicate. Conclusion: Dictionaries are powerful data structures that allow you to store and retrieve values using a key-value pair mechanism. In Swift, dictionaries are easy to use and provide various operations for manipulating and accessing data efficiently. By understanding the concepts and techniques covered in this blog post, you are now equipped to work with dictionaries effectively in Swift. Happy coding!\n","tags":["Swift"],"title":"Dictionary: Swift"},{"categories":["Blog"],"date":"March 5, 2023","permalink":"https://mahigarg.github.io/blogs/protocols-in-swift/","section":"blogs","summary":"In Swift, protocols are a powerful tool that empowers developers to create flexible, reusable, and scalable code. They play a pivotal role in achieving abstraction and enabling polymorphism, essential principles of object-oriented programming (OOP). In this blog, we\u0026rsquo;ll dive into the world of protocols in Swift, explore their features, benefits, and demonstrate how they can be used to design robust and adaptable code with practical examples.\nx\nWhat are Protocols? Protocols in Swift are similar to interfaces in other programming languages. They define a blueprint of methods, properties, and other requirements that a class or struct must adopt. A class or struct that conforms to a protocol promises to provide the implementation for all the requirements defined in that protocol.\nDeclaring Protocols Let\u0026rsquo;s start by creating a simple protocol that defines the requirements for an object that can make a sound:\nprotocol SoundMaker { func makeSound() } In this example, we\u0026rsquo;ve declared a protocol called SoundMaker with a single requirement: the makeSound() method.\nAdopting Protocols Now, let\u0026rsquo;s create two classes that adopt the SoundMaker protocol:\nclass Dog: SoundMaker { func makeSound() { print(\u0026#34;Woof woof!\u0026#34;) } } class Cat: SoundMaker { func makeSound() { print(\u0026#34;Meow!\u0026#34;) } } Both the Dog and Cat classes implement the makeSound() method as required by the SoundMaker protocol.\nUsing Protocols Now that we have our classes conforming to the SoundMaker protocol, we can use the protocol type to create a collection of different sound-making objects:\nlet dog = Dog() let cat = Cat() let soundMakers: [SoundMaker] = [dog, cat] for soundMaker in soundMakers { soundMaker.makeSound() } The output will be:\nWoof woof! Meow! Protocol Properties Protocols can also require properties to be implemented. Let\u0026rsquo;s modify our SoundMaker protocol to include a name property:\nprotocol SoundMaker { var name: String { get } func makeSound() } Now, the classes that adopt the SoundMaker protocol must provide an implementation for the name property:\nclass Dog: SoundMaker { let name: String init(name: String) { self.name = name } func makeSound() { print(\u0026#34;Woof woof!\u0026#34;) } } class Cat: SoundMaker { let name: String init(name: String) { self.name = name } func makeSound() { print(\u0026#34;Meow!\u0026#34;) } } Optional Protocol Requirements In Swift, protocols can also have optional requirements. This means that conforming classes or structs may or may not implement those requirements. To define an optional requirement in a protocol, you use the @objc attribute and mark the requirement with the optional keyword:\n@objc protocol OptionalSoundMaker { @objc optional func optionalSound() } Classes or structs that conform to this protocol can choose to implement the optionalSound() method or not. Note that protocols with optional requirements must be marked with @objc.\nConclusion Protocols are a crucial feature in Swift for designing flexible and reusable code. By defining requirements that classes or structs must adopt, protocols enable polymorphism, allowing different types to be treated as instances of the same protocol. This, in turn, fosters code adaptability, scalability, and enhances code organization.\nIn this blog, we\u0026rsquo;ve explored the basics of protocols in Swift and demonstrated how they can be used to create powerful abstractions and foster polymorphic behavior. Whether you\u0026rsquo;re building iOS apps, macOS applications, or any other Swift-based projects, protocols will undoubtedly play a significant role in designing elegant and maintainable solutions.\nBy embracing protocols and incorporating them into your Swift code, you can write code that is not only robust but also adaptable to future changes. So, the next time you find yourself creating a set of requirements for objects to adhere to, consider using Swift protocols to unlock the true potential of your code! Happy coding! 🚀\n","tags":["Swift"],"title":"Protocols in Swift"},{"categories":["Blog"],"date":"February 26, 2023","permalink":"https://mahigarg.github.io/blogs/extensions-in-swift/","section":"blogs","summary":"Extensions in Swift allow developers to add new functionality to existing classes and protocols without modifying their original implementation. For classes, extensions can include new methods, computed properties, and initializers, promoting code modularity. For protocols, extensions can provide default implementations for methods, enhancing code adaptability. By separating concerns through extensions, developers can achieve cleaner, more organized code, increasing code reusability and maintainability in Swift projects.\nExtending Classes in Swift Swift enables developers to extend classes with new methods, computed properties, and initializers, providing a modular way to add functionality. Let\u0026rsquo;s consider a simple example of extending a Person class:\nclass Person { var name: String init(name: String) { self.name = name } } extension Person { func sayHello() { print(\u0026#34;Hello, my name is \\(name)!\u0026#34;) } } // Usage let person = Person(name: \u0026#34;Mahi\u0026#34;) person.sayHello() // Output: \u0026#34;Hello, my name is Mahi!\u0026#34; By using extensions, we separate the core functionality of the Person class from additional features like sayHello(), enhancing code organization and maintainability.\nExtending Protocols in Swift Extending protocols in Swift allows us to provide default implementations for protocol methods. This feature is particularly useful when adding new methods to existing protocols without breaking the code for existing implementations. Let\u0026rsquo;s illustrate this with a protocol extension for an Animal protocol:\nprotocol Animal { var name: String { get } func makeSound() } extension Animal { func makeSound() { print(\u0026#34;Unknown sound\u0026#34;) } } // Conforming to the protocol struct Dog: Animal { var name: String } struct Cat: Animal { var name: String func makeSound() { print(\u0026#34;Meow!\u0026#34;) } } // Usage let dog = Dog(name: \u0026#34;Buddy\u0026#34;) let cat = Cat(name: \u0026#34;Whiskers\u0026#34;) dog.makeSound() // Output: \u0026#34;Unknown sound\u0026#34; (using default implementation) cat.makeSound() // Output: \u0026#34;Meow!\u0026#34; Code Modularity and Reusability with Extensions Extensions significantly enhance code modularity and reusability by enabling developers to add functionalities to classes and protocols across different files and modules. This segregation of responsibilities ensures a clearer and more organized codebase. Consider the following example:\n// File: MathExtensions.swift extension Int { func squared() -\u0026gt; Int { return self * self } } // File: StringExtensions.swift extension String { func capitalizeFirstLetter() -\u0026gt; String { return prefix(1).capitalized + dropFirst() } } In this example, we have two separate extensions, one for Int and the other for String, each residing in its respective file. These extensions can be added to a project without modifying the original implementations of Int and String, providing code reusability and maintainability.\nConclusion Extensions in Swift are a powerful tool for extending classes and protocols without modifying their original code. By adding new methods, properties, and initializers to classes and providing default implementations for protocol methods, extensions promote code modularity and reusability. Leveraging extensions effectively can significantly improve the development process and maintainability of Swift projects, making it an essential feature for Swift developers to embrace.\n","tags":["Swift"],"title":"Extensions in Swift"},{"categories":["Blog"],"date":"February 22, 2023","permalink":"https://mahigarg.github.io/blogs/generics-in-swift/","section":"blogs","summary":"Generics allow us to write functions, structures, and classes that can work with different types while maintaining type safety. Rather than specifying concrete types, we use placeholders (type parameters) that get substituted with actual types when the code is used. This flexibility makes generics a valuable tool for writing versatile and adaptable code.\nGeneric Functions in Swift Let\u0026rsquo;s begin with a basic example of a generic function that swaps two values of any type:\nfunc swapValues\u0026lt;T\u0026gt;(_ a: inout T, _ b: inout T) { let temp = a a = b b = temp } // Usage var num1 = 5 var num2 = 10 swapValues(\u0026amp;num1, \u0026amp;num2) print(\u0026#34;num1: \\(num1), num2: \\(num2)\u0026#34;) // Output: \u0026#34;num1: 10, num2: 5\u0026#34; var str1 = \u0026#34;Hello\u0026#34; var str2 = \u0026#34;World\u0026#34; swapValues(\u0026amp;str1, \u0026amp;str2) print(\u0026#34;str1: \\(str1), str2: \\(str2)\u0026#34;) // Output: \u0026#34;str1: World, str2: Hello\u0026#34; The swapValues function uses a generic type parameter T in angle brackets (\u0026lt;T\u0026gt;) and performs a value swap on two arguments of the same type.\nGeneric Structures and Classes Generics are not limited to functions; we can also create generic structures and classes. Let\u0026rsquo;s see an example of a generic Stack data structure:\nstruct Stack\u0026lt;Element\u0026gt; { private var elements: [Element] = [] mutating func push(_ element: Element) { elements.append(element) } mutating func pop() -\u0026gt; Element? { return elements.popLast() } } // Usage var intStack = Stack\u0026lt;Int\u0026gt;() intStack.push(1) intStack.push(2) intStack.push(3) print(intStack.pop()) // Output: Optional(3) var stringStack = Stack\u0026lt;String\u0026gt;() stringStack.push(\u0026#34;Swift\u0026#34;) stringStack.push(\u0026#34;is\u0026#34;) stringStack.push(\u0026#34;awesome!\u0026#34;) print(stringStack.pop()) // Output: Optional(\u0026#34;awesome!\u0026#34;) In this example, we define a generic Stack structure that can hold elements of any type. We use the type parameter Element to represent the placeholder type.\nConstraints on Generics Swift allows us to impose constraints on generic types to restrict them to specific requirements. For instance, we can add constraints to ensure that the generic type conforms to a protocol or inherits from a particular class.\nfunc printDetails\u0026lt;T: CustomStringConvertible\u0026gt;(_ item: T) { print(item.description) } // Usage let number = 42 printDetails(number) // Output: \u0026#34;42\u0026#34; let names = [\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;] printDetails(names) // Output: \u0026#34;[\u0026#34;Alice\u0026#34;, \u0026#34;Bob\u0026#34;, \u0026#34;Charlie\u0026#34;]\u0026#34; In this example, the printDetails function takes a generic parameter T, constrained to types conforming to the CustomStringConvertible protocol. This constraint guarantees that we can safely access the description property of the input.\nConclusion Generics in Swift are a powerful and essential tool for creating flexible and reusable code. By using type placeholders, we can write functions, structures, and classes that work with multiple types while maintaining type safety. Embracing generics allows developers to create adaptable, efficient, and maintainable code, making Swift an even more robust and developer-friendly language.\n","tags":["Swift"],"title":"Generics in Swift"},{"categories":["Blog"],"date":"February 20, 2023","permalink":"https://mahigarg.github.io/blogs/variable-types-in-swift/","section":"blogs","summary":"Swift is a powerful and versatile programming language that allows developers to create robust and efficient applications across various platforms. One of the fundamental aspects of Swift is its strong type system, which ensures safety and reliability in code. In this blog, we will dive into the world of variable types in Swift, exploring the various categories and providing examples to enhance your understanding.\n1. Integers Integers are whole numbers with no fractional components. In Swift, there are different types of integers based on their size:\nExamples: a. Int The Int type is the most commonly used integer type in Swift, and its size depends on the platform. On a 64-bit platform, Int is a 64-bit integer, while on a 32-bit platform, it\u0026rsquo;s a 32-bit integer.\nvar age: Int = 25 b. UInt The UInt type represents an unsigned integer, meaning it can only hold non-negative values.\nvar numberOfParticipants: UInt = 100 c. Fixed-size Integers Swift also provides fixed-size integer types like Int8, Int16, Int32, and Int64, which have a specific number of bits they can store.\nvar smallNumber: Int8 = 10 2. Floating-Point Numbers Floating-point numbers represent numbers with fractional components. Swift offers two main types for floating-point numbers:\nExamples: a. Double The Double type is a 64-bit floating-point number and provides a high level of precision.\nvar pi: Double = 3.14159265359 b. Float The Float type is a 32-bit floating-point number with less precision compared to Double.\nvar temperature: Float = 25.5 3. Booleans Booleans represent logical values, indicating either true or false. Swift uses the Bool type for Boolean variables.\nExamples: var isRaining: Bool = true var isLoggedIn: Bool = false 4. Strings Strings represent a sequence of characters and are one of the most commonly used types in any programming language. In Swift, strings are represented using the String type.\nExamples: var greeting: String = \u0026#34;Hello, World!\u0026#34; var username: String = \u0026#34;JohnDoe\u0026#34; 5. Arrays Arrays are collections of values that are stored in a specific order. In Swift, arrays are typed, meaning they can only hold elements of the same type.\nExamples: var numbers: [Int] = [1, 2, 3, 4, 5] var fruits: [String] = [\u0026#34;Apple\u0026#34;, \u0026#34;Banana\u0026#34;, \u0026#34;Orange\u0026#34;] 6. Dictionaries Dictionaries are collections of key-value pairs, where each key is unique. The keys and values in a dictionary can have different types.\nExamples: var scores: [String: Int] = [\u0026#34;John\u0026#34;: 85, \u0026#34;Jane\u0026#34;: 92, \u0026#34;Mike\u0026#34;: 78] var ages: [String: Int] = [\u0026#34;Alice\u0026#34;: 30, \u0026#34;Bob\u0026#34;: 25, \u0026#34;Eve\u0026#34;: 27] 7. Sets Sets are unordered collections of unique elements. They ensure that each element appears only once in the collection.\nExamples: var uniqueNumbers: Set\u0026lt;Int\u0026gt; = [1, 2, 3, 4, 5] var uniqueCharacters: Set\u0026lt;Character\u0026gt; = [\u0026#34;a\u0026#34;, \u0026#34;b\u0026#34;, \u0026#34;c\u0026#34;] 8. Tuples Tuples allow you to group multiple values together as a single compound value. They are useful for returning multiple values from a function.\nExamples: var employee: (name: String, age: Int, department: String) = (\u0026#34;John Doe\u0026#34;, 35, \u0026#34;Engineering\u0026#34;) var coordinates: (Double, Double) = (40.7128, -74.0060) 9. Optionals Optionals are a unique feature in Swift that allows variables to have a value or be nil, indicating the absence of a value.\nExamples: var phoneNumber: Int? = 1234567890 var middleName: String? = nil Conclusion Understanding variable types in Swift is essential for writing reliable and safe code. Swift\u0026rsquo;s strong type system helps catch errors during development and enhances code readability. By using the appropriate variable types, you can build efficient and robust applications that cater to a wide range of use cases.\nKeep practicing and exploring the different variable types in Swift, and you\u0026rsquo;ll become a proficient Swift developer in no time! Happy coding! 🚀\n","tags":["Swift"],"title":"Variable Types in Swift"},{"categories":["Blog"],"date":"February 17, 2023","permalink":"https://mahigarg.github.io/blogs/let-vs-var-mutability-in-swift/","section":"blogs","summary":"Swift is a powerful and modern programming language that allows developers to build robust and efficient applications for various platforms. One of the key features of Swift is its support for both immutable constants and mutable variables through the use of let and var declarations, respectively. In this blog, we will explore the differences between let and var, along with examples to illustrate their usage and significance in Swift programming.\n1. let - Immutable Constants In Swift, the let keyword is used to declare constants. Constants are variables whose values cannot be changed after they are assigned. Once you assign a value to a constant, it remains fixed throughout its lifetime.\nExample: let pi: Double = 3.14159 let name: String = \u0026#34;John Doe\u0026#34; In the above example, we declare two constants: pi, which holds the value of Pi, and name, which stores a person\u0026rsquo;s name. Once assigned, the values of these constants cannot be modified.\n2. var - Mutable Variables On the other hand, the var keyword is used to declare variables that can have their values changed or reassigned after initialization. Variables declared with var are mutable.\nExample: var counter: Int = 0 var temperature: Float = 25.5 In the above example, we declare two variables: counter, which starts with an initial value of 0, and temperature, which holds the current temperature. We can change the values of these variables throughout the program as needed.\n3. Advantages of let and var Advantages of let (Immutable Constants): Safety: Constants ensure that the value assigned to them remains unchanged, reducing the risk of unintended side effects in your code. Clarity: Declaring a value as a constant with let clearly indicates to other developers that the value is not meant to change. Advantages of var (Mutable Variables): Flexibility: Variables declared with var allow you to modify their values, making them suitable for situations where the value needs to be updated during program execution. State management: Variables are useful for keeping track of changing states and dynamic data in your application. 4. Choosing between let and var When choosing between let and var, consider the following guidelines:\nUse let when: You have a value that should not change after its initial assignment. You want to enforce immutability for certain data to ensure data integrity and consistency. Use var when: You need a value that can change or be updated during program execution. You want a variable to hold state or dynamic data. 5. Examples of let and var in Different Scenarios Example 1 - let (Immutable Constant): let numberOfDaysInAWeek: Int = 7 let websiteURL: String = \u0026#34;https://www.example.com\u0026#34; // numberOfDaysInAWeek = 8 // Error: Cannot reassign a value to a constant // websiteURL = \u0026#34;https://www.newurl.com\u0026#34; // Error: Cannot reassign a value to a constant Example 2 - var (Mutable Variable): var score: Int = 0 var playerName: String = \u0026#34;John Doe\u0026#34; score = 100 // Updating the score playerName = \u0026#34;Jane Smith\u0026#34; // Changing the player\u0026#39;s name Conclusion Understanding the difference between let and var in Swift is crucial for writing clean, efficient, and reliable code. By using let, you can create immutable constants that guarantee the value remains fixed throughout its lifetime, enhancing code safety and clarity. On the other hand, var allows you to declare mutable variables, providing the flexibility to modify values as needed during program execution.\nBy following best practices and choosing the appropriate type (let or var) for your variables, you can write code that is easy to understand, maintain, and scale in your Swift projects. Happy coding! 🚀\n","tags":["Swift"],"title":"let vs var: Mutability in Swift"},{"categories":["Blog"],"date":"February 13, 2023","permalink":"https://mahigarg.github.io/blogs/optional-type-in-swift/","section":"blogs","summary":"Swift is a robust and modern programming language that prioritizes safety and reliability. One of the key features that contribute to Swift\u0026rsquo;s safety is its handling of optional types. Optional types allow developers to indicate the possible absence of a value, which helps prevent runtime crashes due to unexpected nil values. In this blog, we will explore the concept of optional types in Swift, along with examples to demonstrate how they can be effectively utilized in your code.\nUnderstanding Optionals In Swift, an optional is a type that can hold either a value or nil, indicating the absence of a value. Optionals are denoted by appending a question mark ? after the type of the value they can contain.\nExample: var phoneNumber: Int? = 1234567890 var middleName: String? = nil In the example above, we declare two optional variables: phoneNumber of type Int? and middleName of type String?. phoneNumber holds a valid integer value, while middleName is explicitly set to nil to indicate the absence of a middle name.\nHandling Optionals Safely Optional Binding Optional binding is a safe way to unwrap optional values and use them if they are not nil. It is achieved through the if let or guard let constructs.\nExample using if let: func printMiddleName(_ middleName: String?) { if let name = middleName { print(\u0026#34;Middle name: \\(name)\u0026#34;) } else { print(\u0026#34;No middle name.\u0026#34;) } } let fullName: String? = \u0026#34;John Smith\u0026#34; let nameComponents = fullName?.components(separatedBy: \u0026#34; \u0026#34;) if let middleName = nameComponents?[1] { printMiddleName(middleName) } else { print(\u0026#34;No middle name found.\u0026#34;) } In the above example, we use optional binding with if let to safely unwrap the middle name and print it if it exists. If the middle name is nil, we print a message indicating its absence.\nNil Coalescing Operator The nil coalescing operator (??) provides a concise way to handle optionals and provide a default value if the optional is nil.\nExample: let username: String? = nil let defaultUsername: String = \u0026#34;Guest\u0026#34; let greeting = \u0026#34;Hello, \\(username ?? defaultUsername)!\u0026#34; print(greeting) In the example above, we use the nil coalescing operator to provide a default username Guest in case the username is nil. This ensures that the greeting string is always well-formed.\nOptional Chaining Optional chaining is a powerful feature that allows you to call properties, methods, and subscripts on an optional that might be nil.\nExample:\nstruct Address { var street: String var city: String var zipCode: String } struct Person { var name: String var address: Address? } let john = Person(name: \u0026#34;John Doe\u0026#34;, address: Address(street: \u0026#34;123 Main St\u0026#34;, city: \u0026#34;New York\u0026#34;, zipCode: \u0026#34;10001\u0026#34;)) let johnsCity = john.address?.city ?? \u0026#34;Unknown City\u0026#34; print(\u0026#34;John lives in \\(johnsCity).\u0026#34;) In the example above, we use optional chaining to access the city property of the optional address. If the address is nil, the result of the optional chaining expression is also nil, and the nil coalescing operator provides a default value \u0026ldquo;Unknown City\u0026rdquo;.\nConclusion Understanding optional types in Swift is crucial for writing safe and robust code. By embracing optionals, you can effectively handle scenarios where values might be missing, avoiding runtime crashes and improving the overall stability of your applications.\nWith optional binding, nil coalescing, and optional chaining, Swift provides a comprehensive set of tools to handle optionals safely and efficiently. Mastering these concepts will empower you to write code that gracefully handles the absence of values and ensures a smooth user experience in your Swift projects. Happy coding! 🚀\n","tags":["Swift"],"title":"Optional Type in Swift"},{"categories":["Blog"],"date":"January 31, 2023","permalink":"https://mahigarg.github.io/blogs/do-while-repeat-while-loop-in-swift/","section":"blogs","summary":"Swift is a powerful and expressive programming language that offers a variety of loop structures to handle repetitive tasks efficiently. Among these, the do-while loop stands out as a loop that ensures the code inside the loop executes at least once, regardless of the loop\u0026rsquo;s condition. In this blog, we will explore the do-while loop in Swift, its syntax, and examples to showcase its usefulness in different scenarios.\nIntroducing the do-while Loop The do-while loop, also known as the repeat-while loop, is a control flow statement that iterates over a block of code while a specified condition remains true. The unique feature of the do-while loop is that it guarantees the code inside the loop is executed at least once, even if the condition evaluates to false from the beginning.\nSyntax of the do-while Loop The basic syntax of the do-while loop in Swift is as follows:\ndo { // Code to be executed at least once } while condition The condition is a Boolean expression that determines whether the loop should continue iterating or terminate. The block of code inside the do section is executed first, and then the condition is checked. If the condition evaluates to true, the loop repeats; otherwise, the loop terminates.\nExamples of do-while Loop Example 1 - Rolling a Dice: import Foundation var diceValue: Int repeat { diceValue = Int.random(in: 1...6) print(\u0026#34;You rolled a \\(diceValue)\u0026#34;) } while diceValue != 6 In this example, the do-while loop simulates rolling a dice. The loop continues to roll the dice and print the result until the dice rolls a value of 6. Since the condition is checked after the loop body, the loop always rolls the dice at least once, guaranteeing that the player gets a result.\nExample 2 - Reading User Input: var input: String repeat { print(\u0026#34;Please enter a positive number:\u0026#34;) input = readLine() ?? \u0026#34;\u0026#34; } while Double(input) == nil || Double(input)! \u0026lt;= 0 let number = Double(input)! print(\u0026#34;The square root of \\(number) is \\(sqrt(number))\u0026#34;) In this example, the do-while loop prompts the user to enter a positive number repeatedly until a valid positive number is provided. The loop checks whether the input can be converted to a valid positive number (not nil and greater than 0) before proceeding with the computation and printing the square root.\nLoop Control and Infinite do-while Loops As with any loop structure, you must exercise caution to avoid creating infinite loops that never terminate. An infinite do-while loop can be created by using a condition that always evaluates to true. For example:\n// Infinite Loop repeat { // Code that keeps executing indefinitely } while true To prevent infinite loops, ensure that the loop condition eventually evaluates to false based on the progression of your loop.\nConclusion The do-while loop in Swift is a powerful and flexible tool that allows you to handle repetitive tasks, ensuring that the loop body executes at least once, regardless of the loop\u0026rsquo;s condition. With the examples provided in this blog, you can now apply the do-while loop effectively in various scenarios, such as input validation, randomization, and more.\nAlways use loop control statements like break and continue judiciously to manage the flow of your loops, and avoid creating infinite loops that may cause your program to hang or crash. Embrace the power of the do-while loop in Swift and elevate your programming skills to new heights. Happy coding! 🚀\n","tags":["Swift"],"title":"Do While (Repeat While) Loop in Swift"},{"categories":["Blog"],"date":"January 26, 2023","permalink":"https://mahigarg.github.io/blogs/while-loop-in-swift/","section":"blogs","summary":"In any programming language, loops are essential for performing repetitive tasks efficiently. Swift offers a variety of loop structures, and one of the most versatile ones is the while loop. In this blog, we will explore the while loop in Swift, its syntax, and various examples to demonstrate how it can be utilized to achieve repetitive operations effectively.\nUnderstanding the while Loop The while loop is a control flow statement that allows you to execute a block of code repeatedly as long as a specified condition remains true. The loop continues to execute until the condition evaluates to false.\nSyntax of the while Loop The basic syntax of the while loop in Swift is as follows:\nwhile condition { // Code to be executed while the condition is true } The condition is a Boolean expression that determines whether the loop\u0026rsquo;s body should be executed. If the condition evaluates to true, the loop\u0026rsquo;s body is executed, and the process repeats until the condition becomes false.\nExamples of while Loop Example 1 - Printing Numbers: var number = 1 while number \u0026lt;= 5 { print(number) number += 1 } In the above example, the while loop prints the numbers from 1 to 5. The loop starts with number set to 1, and in each iteration, it prints the value of number and increments it by 1. The loop continues executing until number becomes 6, which is when the while condition becomes false, and the loop terminates.\nExample 2 - Fibonacci Series: func fibonacciSeries(_ n: Int) { var a = 0, b = 1, c = 0 while c \u0026lt; n { print(a) c = a + b a = b b = c } } fibonacciSeries(20) In this example, the while loop generates the Fibonacci series up to the value of n. The loop starts with a and b initialized to 0 and 1, respectively. In each iteration, the loop calculates the next Fibonacci number by summing up a and b, updates a and b, and prints the current Fibonacci number. The loop continues until c (the next Fibonacci number) becomes greater than or equal to n.\nInfinite Loops and Loop Control Statements It is essential to be cautious while using while loops to avoid creating infinite loops. An infinite loop is a loop that never terminates because its condition always evaluates to true. For example:\n// Infinite Loop - DO NOT USE while true { // Code that keeps executing indefinitely } To break out of a loop prematurely, you can use the break statement. To skip the current iteration and continue with the next one, you can use the continue statement.\nConclusion The while loop in Swift is a powerful construct that allows you to perform repetitive tasks efficiently. By defining a condition that evaluates to true while the loop should continue, you can ensure that the loop executes the necessary code until the condition becomes false.\nWith the examples provided in this blog, you can now apply the while loop in Swift to various scenarios and achieve efficient repetition in your programs. Always exercise caution with infinite loops and utilize loop control statements (break and continue) when needed to control the flow of your loops effectively. Happy coding! 🚀\n","tags":["Swift"],"title":"While Loop in Swift"},{"categories":["Blog"],"date":"January 15, 2023","permalink":"https://mahigarg.github.io/blogs/state-swiftui/","section":"blogs","summary":"In SwiftUI, a powerful framework for building user interfaces, managing and updating the state of our views is essential for creating dynamic and interactive user experiences. One key tool SwiftUI provides for this purpose is the @State property wrapper.\nNow let us understand what is @State, how it works, what we can achieve through this, and much more.\nWhat is @State? The @State property wrapper is a fundamental component of SwiftUI that allows us to declare mutable state properties within a view. When the value of @State property changes, SwiftUI automatically re-renders the view, ensuring that the UI stays synchronized with the underlying state.\nLet us understand this with an example.\nConsider you want to change the background color of your view with a few button clicks. please have a look at the below code where we will understand its declaration and usage part as well.\nstruct stateBootCamp: View { @State var backgroundColor = Color.red var body: some View { ZStack { backgroundColor VStack(spacing: 20) { Text(\u0026#34;Studing @State\u0026#34;) .font(.title) Button(\u0026#34;BUTTON Green\u0026#34;) { backgroundColor = .green } Button(\u0026#34;BUTTON Pink\u0026#34;) { backgroundColor = .pink } } .foregroundColor(.white) } } } To declare, prefix @State to property declaration. Above we made backgroundColor a state property.\nNow let us understand it\u0026rsquo;s working.\nThe first view is your Initial View in zero state. When you tap on BUTTON Green, the background color changes to green as we are changing the state variable color to Green as the action of Button. Similarly, on Tap of BUTTON Pink, the background color changes to Pink. With this, we understood how @State is used.\nUsage scenario of @State @State is best suited for managing a state within a single view or a small portion of the view hierarchy. It works well for a local, transient state that doesn\u0026rsquo;t need to be shared across multiple views or persisted across sessions.\nLimitation of @State @State not suitable for managing states across multiple views or when sharing states between different parts of an application. In such cases, @ObservedObject or @EnvironmentObject maybe more appropriate choices. By leveraging @State, SwiftUI empowers developers to build modern, responsive applications that are efficient, maintainable, and delightful to use.\n","tags":["SwiftUI"],"title":"@State: SwiftUI"},{"categories":["Blog"],"date":"August 22, 2022","permalink":"https://mahigarg.github.io/blogs/for-loop-with-where-clause-swift/","section":"blogs","summary":"For loop is an inevitable part of any programming language. It iterates over every element of the collection type data including array, set, and dictionary, and does the operation as per the code.\nLet us see an example of the same. Consider an array of integers and a for loop accessing its even integers.\n//array example let numbers = [23,62,6,12,87,55,45,22] //for loop for number in numbers { print(number) } Above swift code will print all integers in the array. But sometimes we need only elements on certain conditions like even number, or positive number. This can be achieved by giving a where clause with the for loop body.\nLet us see the code for filtering even numbers.\n//for loop with where for number in numbers where number % 2 == 0 { print(number) } // print 62 6 12 22 Here data is filtered according to where clause i.e., only even numbers will be printed. Similarly, we can filter data on more than one condition using (||) or and (\u0026amp;\u0026amp;) depending on the use case.\nLet us look at this with an example.\n//for loop with where for number in numbers where number % 2 == 0 || number \u0026gt; 50 { print(number) } // 62 6 12 87 55 22 Here data is filtered according to where clause i.e., even numbers or numbers greater than 50 will be printed.\nNow let us consider case printing numbers that are even and greater than 50.\n//for loop with where for number in numbers where number % 2 == 0 \u0026amp;\u0026amp; number \u0026gt; 50 { print(number) } // prints even numbers and number greater than 50 // 62 Here data is filtered according to where clause i.e. even numbers and numbers greater than 50 will be printed.\n","tags":["Swift"],"title":"For loop with where clause: Swift"},{"categories":["Blog"],"date":"August 16, 2022","permalink":"https://mahigarg.github.io/blogs/round-up-to-n-decimal-digit-swift/","section":"blogs","summary":"We sometimes in our calculation get results with more than 4 decimal digits or even more. But as a developer, we can’t use the same to display to users.\nImagine we have a dashboard application that displays monthly tax on an employee\u0026rsquo;s salary. And it is coming as 630.6152. This doesn’t look good at all to say the same. It will be better to show it like 630.62 or 630.61 i.e., rounding it to n Decimal Digit.\nLet us take a look at how this can be done.\nIf we say round up to n Decimal Digits where n equals 2. Then we need to follow the below steps\nMultiply it by 100 (10^n) Use round, floor, or ceil to remove the extra digits Divide by 100 (10^n) Round to n digits using the round function //after calculation tax = 630.6152 //multiply with 100 var result = tax * 100 //63061.52 //Using round to remove extra digit roundresult = round(result) //63062 //divide by 100 result = result/ 100 print (result) //630.62 print(evenNumbers) Here tax 630.6152 is rounded to 630.62 as the third decimal digit is 5.\nLet us consider example 437.1932. Here 3 is the third decimal digit.\n//after calculation tax = 437.1932 //multiply with 100 var result = tax * 100 //43719.32 //Using round to remove extra digit roundresult = round(result) //43719 //divide by 100 result = result/ 100 print (result) //437.19 On comparing the result of both the example, we can see the result depends on the decimal digits we have. If the third digit is between 1 to 4, then it will keep the existing previous results (437.1932 -\u0026gt; 437.19) but in the case of digits between 5–9, it increases the last digit (630.6152 -\u0026gt; 630.61).\nNow let us see how our output will be impacted if we use the floor or ceil function instead of round.\nRound to n digits using the floor function Considering the same example here. Tax after calculation equals 630.6152.\n//after calculation tax = 630.6152 //multiply with 100 var result = tax * 100 //63061.52 //Using floor to remove extra digit floorResult = floor(result) //63061 //divide by 100 floorResult = floorResult / 100 print (floorResult) //630.61 Here, we saw floor will step down the result irrespective of the digit we have at the third position, be it 1 or 9 it will always take you to the nearest smallest number.\nRound to n digits using the ceil function Here, let us alter our example to 630.6122 and see how our results vary.\n//after calculation tax = 630.6122 //multiply with 100 var result = tax * 100 //63061.22 //Using ceil to remove extra digit ceilResult = ceil(result) //63062 //divide by 100 ceilResult = ceilResult / 100 print (ceilResult) //630.62 Here, we saw ceil will step up the result irrespective of the digit we have at the third position, be it anything between 1 to 9 it will always take you to the nearest largest number.\n","tags":["Swift"],"title":"Round up to n Decimal Digit: Swift"},{"categories":["Blog"],"date":"July 2, 2022","permalink":"https://mahigarg.github.io/blogs/setup-firebase-remoteconfig/","section":"blogs","summary":"In continuation with the previous article stating the benefits and working of Firebase RemoteConfig, this article will help you to set up Firebase step by step. Additionally, it will tell you how to configure the remoteConfig Parameter and fetch and Apply the configuration to your app.\nStep 1: Setting Up Firebase RemoteConfig: 1.1 Create a Firebase Project: Start by creating a Firebase project through the Firebase console. Follow the provided instructions to set up your project, including adding the necessary dependencies to your app.\n1.2 Enable RemoteConfig: In the Firebase console, navigate to the RemoteConfig section and enable it for your project. This will allow you to define and manage remote configurations for your app.\nStep 2: Configuring Remote Parameters: 2.1 Define Parameters: Within the RemoteConfig section of the Firebase console, define the parameters you want to configure remotely. These parameters can include strings, booleans, numbers, or JSON objects. Set default values for each parameter to ensure that your app has fallback values in case the remote configurations are not yet fetched.\n2.2 Add Conditions (Optional): To target specific user segments or conditions, you can add conditions to your parameters. For example, you can define a condition based on the user’s country, app version, or any other custom criteria. This allows you to tailor the configurations for different user segments.\nStep 3: Fetching and Applying Configurations: 3.1 Initialize RemoteConfig: In your app’s code, initialize the RemoteConfig instance by obtaining a reference to it from the Firebase SDK. This allows you to interact with the RemoteConfig service.\n3.2 Fetch Configurations: To fetch the remote configurations, call the fetch() method on the RemoteConfig instance. You can specify a cache expiration duration to control how frequently the configurations should be refreshed. Firebase provides options for using a minimum fetch interval or manual fetch.\n3.3 Apply Configurations: After fetching the configurations, call the activate() method to apply the fetched configurations to your app. This ensures that the app\u0026rsquo;s behavior aligns with the remote settings.\nStep 4: Remote Configuration Updates: 4.1 Modify Configurations: To update the configurations remotely, make changes within the Firebase console. You can modify parameter values, add new parameters, or adjust conditions.\n4.2 Publish Configurations: After making the necessary changes, publish the configurations from the Firebase console. Publishing makes the updated configurations available to your app during the next fetch.\nStep 5: Testing and Monitoring: 5.1 Test Configurations: Before deploying the configurations to all users, test them thoroughly to ensure they function as expected. Consider creating a test environment or using Firebase’s remote conditions to target a small group of users for testing purposes.\n5.2 Monitor Performance: Leverage Firebase Analytics to track the impact of configuration changes on user behavior, engagement, and other relevant metrics. This helps you understand the effectiveness of your configurations and make data-driven decisions for optimization.\n","tags":["Firebase"],"title":"Setup Firebase RemoteConfig"},{"categories":["Blog"],"date":"June 19, 2022","permalink":"https://mahigarg.github.io/blogs/map-operator-swift/","section":"blogs","summary":"The collection is something which is used by almost everyone. It makes our life easy. Array, Set, and Dictionary are the best examples of them.\nTo iterate, filter, or modify the existing collection object, Swift provides us with a few in builds transform operators. Map operator is one of them. Let’s try to understand the Map operator in detail.\nWhat is Map operator? Map operator is used to creating a new collection object by iterating over the existing collection object and applying some transformation to it.\nThe transformation that needs to be applied, is passed as a higher-order function named transform to the map function.\nSince the map operator is present in Iterator, it can be used with all three collections ie Array, Set, and Dictionary.\n/// Returns an array containing the results of mapping the given closure over the sequence\u0026#39;s elements. /// - Parameter transform: A mapping closure. `transform` accepts an /// element of this sequence as its parameter and returns a transformed value of the same or of a different type. /// - Returns: An array containing the transformed elements of this sequence. @inlinable public func map\u0026lt;T\u0026gt;(_ transform: (Element) throws -\u0026gt; T) rethrows -\u0026gt; [T] Keep in mind, that this map function never holds the exceptions but it throws them to the caller. If there are any chances of any kind of exception at runtime, we need to wrap this inside a try-catch block.\nMap with Array map operator can be used over an Array to apply the transformation on its elements and return the new Array. It can be used with a named parameter or using $0.\nlet array = [1, 2, 3, 4, 5, 6] let mappedArray = array.map { item in //this will convert all the elements to its square item * item } //or let mappedArray = array.map { //this will convert all the elements to its square $0 * $0 } print(mappedArray) It can also be used with enumerated for positional-based access.\nlet array = [1, 2, 3, 4, 5, 6] let mappedArray = array.enumerated().map { index, item in //this will convert all the elements to its square item * item } //or let mappedArray = arrayenumerated.map { //this will convert all the elements to its square $1 * $1 } print(mappedArray) Map with Set Similar to Array, the map operator can be used along with a Set to iterate over its elements, apply some transformation on its elements and return the new Set. It can be used with a named parameter or using $0.\nlet set : Set = [1, 2, 3, 4, 5, 6] let filteredSet = set.map { item in item * item } //or let filteredSet = set.map { $0 * $0 } print(filteredSet) There is no point in using an enumerated map with the Set as it never guarantees the sequence in a Set.\nMap with Dictionary Similar to Array and Set, the map operator can be used over a Dictionary to iterate over the Dictionary, apply some transformation to its elements and return the new Dictionary. It can be used with a named parameter or using $0.\nlet map = [1: \u0026#34;One\u0026#34;, 2: \u0026#34;Two\u0026#34;, 3: \u0026#34;Three\u0026#34;] let filteredMap = map.map { item in (item.key, item.value.uppercased()) } //or let filteredMap = map.map { ($0.key, $0.value.uppercased()) } print(filteredMap) There is no point in using an enumerated map with the Dictionary as it never guarantees the sequence in a Dictionary.\n","tags":["Swift"],"title":"Map Operator: Swift"},{"categories":["Blog"],"date":"June 11, 2022","permalink":"https://mahigarg.github.io/blogs/0-1-n-in-swift/","section":"blogs","summary":"In order to use any parameter in a closure or a higher-order function, we need to name the parameter inside the closure or higher-order function.\nThe syntax looks like the below.\nlet array = [1, 2, 3, 4, 5, 6] let evenNumbers = array.filter { item in item % 2 == 0 } print(evenNumbers) This filter function takes a single argument which is another function that is of (Int) -\u0026gt; Bool type. The inner function takes every element of the array one by one and checks if that is an even number or not. It returns true if the condition is true else it returns false.\nThe parameter passed inside the function can be replaced with $0.\n$0 represents the first parameter of closure or higher-order function.\nIt can be used with both closers or higher-order functions.\nThe same syntax will look like below.\nlet array = [1, 2, 3, 4, 5, 6] let evenNumbers = array.filter { $0 % 2 == 0 } print(evenNumbers) In case the number of parameters are more than one,\n$0, $1 up to $n can be used.\nFor example, look at the below case where there are two parameters passed to the higher-order function namely index and item.\nlet array = [1, 2, 3, 4, 5, 6] let filterArray = array.enumerated().filter {index, item in //I am doing some rocket science here print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) return index != 2 \u0026amp;\u0026amp; item % 2 == 0 } print(filterArray) We can use $0 for index and $1 for item in the same example.\nlet array = [1, 2, 3, 4, 5, 6] let filterArray = array.enumerated().filter { //I am doing some rocket science here print(\u0026#34;Item at \\($0) is \\($1)\u0026#34;) return $0 != 2 \u0026amp;\u0026amp; $1 % 2 == 0 } print(filterArray) These numbers can go up to any number of parameters passed to the inner function.\nI’ll personally suggest using named parameters if the parameters are more than three as it\u0026rsquo;s difficult to remember which $ variable is what. Up to three is really helpful.\n","tags":["Swift"],"title":"$0, $1 … $n in Swift"},{"categories":["Blog"],"date":"June 4, 2022","permalink":"https://mahigarg.github.io/blogs/named-and-unnamed-parameters-swift/","section":"blogs","summary":"Functions are something that every developer uses daily. A function can of with or without parameters. Swift has multiple ways of passing the parameters to a function. we can alias the parameter name or we can even skip the parameter name while calling the function.\nThe parameter inside the function will still be used by its own name only but while calling the function, the name of the parameter can be replaced or even removed based on the function signature.\nLet\u0026rsquo;s look at them one by one.\nBelow is a normal function with a single parameter and calling it using the parameter name\nfunc doSomething(number : Int){ //I\u0026#39;ll do some rocket science here, //and at the end, will just print the param print (number) } doSomething(number: 100) In order to call the above function, we need to write the parameter name. In the above case the parameter name was number .\nSometimes it\u0026rsquo;s tedious to write the parameter name again and again or sometimes the function name itself is enough to make understand what that function is responsible for.\nIn those cases, in order to skip the parameter name every time we call that function, it can be preceded with an underscore _ which will make the parameter name unnamed.\nfunc doSomethingWithNumber(_ number : Int){ //I\u0026#39;ll do some rocket science here, //and at the end, will just print the param print (number) } doSomethingWithNumber(100) Here in the above example, we added an underscore _ in front of the parameter name which made the parameter unnamed. In order to call this function now, we don’t have to add the parameter name ie number in our case.\nKeep in mind that we can’t even use the parameter name now. Underscore _ doesn’t make it optional but it actually made it unnamed.\nWe can even provide an alias to the parameter after which the parameter will be used with the new alias name instead of the original parameter name.\nfunc doSomething(with number : Int){ //I\u0026#39;ll do some rocket science here, //and at the end, will just print the param print (number) } doSomething(with: 100) In the above example, we added with as an alias name for the parameter. Now in order to call this function, we need to use with as the parameter name instead of number.\nKeep in mind that this is not optional to use as a parameter name but it is mandatory.\nAlso, in all the cases, the parameter inside that function will still be used as its own name only. There is no change in that.\n","tags":["Swift"],"title":"Named and Unnamed Parameters: Swift"},{"categories":["Blog"],"date":"May 29, 2022","permalink":"https://mahigarg.github.io/blogs/filter-operator-swift/","section":"blogs","summary":"The collection is something which is used by almost everyone. It makes our life easy. Array, Set, and Dictionary are the best examples of them.\nTo iterate, filter, or modify the existing collection object, Swift provides us with a few in builds transform operators. Filter operator is one of them. Let\u0026rsquo;s try to understand the filter operator in detail.\nWhat is filter operator? The filter operator is used to create a new collection object by iterating over the existing collection object and filtering the elements based on the predicates to it.\nThe predicate that needs to be checked for, is passed as a higher-order function named isIncluded to the filter function.\nSince the filter operator is present in Iterator, it can be used with all three collections ie Array, Set, and Dictionary.\n/// Returns an array containing, in order, the elements of the sequence that satisfy the given predicate. /// - Parameter isIncluded: A closure that takes an element of the sequence as its argument and returns a Boolean value indicating whether the element should be included in the returned array. /// - Returns: An array of the elements that `isIncluded` allowed. /// - Complexity: O(*n*), where *n* is the length of the sequence. @inlinable public func filter(_ isIncluded: (Iterator.Element) throws -\u0026gt; Bool) rethrows -\u0026gt; [Iterator.Element] Keep in mind, that this filter function never holds the exceptions but it throws them to the caller. If there are any chances of any kind of exception at runtime, we need to wrap this inside a try-catch block.\nFilter with Array filter operator can be used over an Array to check the predicate on its elements and return the filtered Array. It can be used with a named parameter or using $0.\nlet array = [1, 2, 3, 4, 5, 6] let filteredArray = array.filter { item in item % 2 == 0 } //or let filteredArray = array.filter { $0 % 2 == 0 } print(filteredArray) It can also be used with enumerated for positional-based access.\nlet array = [1, 2, 3, 4, 5, 6] let filteredArray = array.enumerated().filter {index, item in //I am doing some rocket science here print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) return index != 2 \u0026amp;\u0026amp; item % 2 == 0 } //or let filteredArray = array.enumerated().filter { //I am doing some rocket science here print(\u0026#34;Item at \\($0) is \\($1)\u0026#34;) return $0 != 2 \u0026amp;\u0026amp; $1 % 2 == 0 } print(filteredArray) Filter with Set Similar to Array, the filter operator can be used over a Set to check the predicate on its elements and return the filtered Set. It can be used with a named parameter or using $0.\nlet set = [1, 2, 3, 4, 5, 6] let filteredSet = set.filter { item in item % 2 == 0 } //or let filteredSet = set.filter { $0 % 2 == 0 } print(filteredSet) There is no point in using an enumerated filter with the Set as it never guarantees the sequence in a Set.\nFilter with Dictionary Similar to Array and Set, the filter operator can be used over a Dictionary to check the predicate on its elements and return the filtered Dictionary. It can be used with a named parameter or using $0.\nlet map = [1: \u0026#34;One\u0026#34;, 2: \u0026#34;Two\u0026#34;, 3: \u0026#34;Three\u0026#34;] let filteredMap = map.filter { item in item.key % 2 == 0 } //or let filteredMap = map.filter { $0.key % 2 == 0 } print(filteredMap) There is no point in using an enumerated filter with the Dictionary as it never guarantees the sequence in a Dictionary.\n","tags":["Swift"],"title":"Filter Operator: Swift"},{"categories":["Blog"],"date":"May 28, 2022","permalink":"https://mahigarg.github.io/blogs/enumerated-in-swift/","section":"blogs","summary":"Enumerated is used to iterate over a collection along with the position access. It returns a sequence of Pairs where the first element in the Pair is the index and the second element is the element itself of the collection.\nEnumerated is useful when we want to access the position along with making any iteration, filtration or even mapping of the objects of a collection.\nLets look at its definition first.\n/* Returns a sequence of pairs (*n*, *x*), where *n* represents a consecutive integer starting at zero and *x* represents an element of the sequence. */ @inlinable public func enumerated() -\u0026gt; EnumeratedSequence\u0026lt;Array\u0026lt;Element\u0026gt;\u0026gt; Enumerated best use case is with an array.\nlet array = [1, 2, 3, 4, 5] for (index, item) in array.enumerated() { print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) } It can also be used with set and map but the order of insertion is not guaranteed in both set and map.\nlet set = [1, 2, 3, 4, 5] for (index, item) in set.enumerated() { print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) } let map = [1: \u0026#34;One\u0026#34;, 2: \u0026#34;Two\u0026#34;, 3: \u0026#34;Three\u0026#34;] for (index, item) in map.enumerated() { print(\u0026#34;Item at \\(index) is key: \\(item.key) value: \\(item.value)\u0026#34;) } Enumerated can also be used to iterate over a string with the sequence of Pairs of the index and the respective character at that index.\nfor (index, item) in \u0026#34;Swift\u0026#34;.enumerated() { print(\u0026#34;Item at \\(index) is \\(item)\u0026#34;) } //this will print Item at 0 is S Item at 1 is w Item at 2 is i Item at 3 is f Item at 4 is t There is no need to convert the string to a char array first and then iterate over it. The Enumerated function will take care of it.\n","tags":["Swift"],"title":"Enumerated in Swift"},{"categories":["Blog"],"date":"May 28, 2022","permalink":"https://mahigarg.github.io/blogs/remoteconfig-in-firebase/","section":"blogs","summary":"In today’s fast-paced world, mobile app developers must adapt quickly to changing user preferences, market demands, and evolving business requirements. To achieve this, developers need a robust mechanism to configure apps remotely without frequent updates. Firebase RemoteConfig is a powerful tool offered by Google Firebase. It enables developers to dynamically update app settings, content, and feature flags from a centralized console, allowing them to deliver a personalized and tailored experience to the users.\nWhat is Firebase RemoteConfig? Firebase RemoteConfig is a cloud-based service that allows developers to change the behavior and appearance of their mobile applications without requiring users to update their apps. It provides a simple and efficient way to manage configurable parameters such as feature flags, strings, numbers, and even remote JSON files. With RemoteConfig, developers can fine-tune their app’s behavior, perform A/B testing, and target specific user segments based on dynamic conditions.\nBenefits of Using RemoteConfig: 2.1 Real-time Configuration Updates: Firebase RemoteConfig enables developers to update app configurations in real time, eliminating the need for app updates. This capability empowers developers to react swiftly to changing requirements, fix bugs, and introduce new features without disrupting the user experience.\n2.2 Personalization and A/B Testing: With RemoteConfig, developers can define configurations for specific user segments or conduct A/B tests to evaluate the impact of various settings on user engagement and conversion rates. This allows for data-driven decision-making and personalized experiences tailored to each user.\n2.3 Gradual Rollouts and Phased Feature Launches: RemoteConfig supports gradual rollouts of new features by allowing developers to target a subset of users with specific configurations. By releasing features incrementally, developers can gather feedback, monitor performance, and ensure a smooth rollout for all users.\n2.4 Simplified Maintenance: By centralizing configuration management in a web-based console, RemoteConfig simplifies the maintenance process. Developers can modify configurations, set default values, and monitor the usage and impact of different settings, all from a single location.\nWorking with RemoteConfig: 3.1 Configuration Setup: Developers define configuration parameters, their default values, and any associated conditions within the Firebase console. These parameters are stored in the Firebase backend and can be easily updated without requiring app updates.\n3.2 Fetching and Applying Configurations: The mobile app fetches the latest configurations from the Firebase backend during runtime. RemoteConfig provides a simple API to fetch and apply configurations within the app, ensuring that the app’s behavior adapts to the latest settings.\n3.3 Conditions and Targeting: RemoteConfig supports conditional configurations based on various criteria such as app version, language, country, user properties, or custom conditions defined by developers. This allows for precise targeting and tailoring of experiences to different user segments.\nBest Practices and Considerations: 4.1 Testing and Validation: Thoroughly test and validate configuration changes before rolling them out to ensure they function as intended and do not negatively impact the app’s stability or performance.\n4.2 Version Control: Maintain a version control system or use Firebase’s history feature to track and revert configuration changes if necessary, ensuring better accountability and easy rollback options.\n4.3 Monitoring and Analytics: Leverage Firebase Analytics to track the impact of configuration changes on user behavior, engagement, and conversion rates. Monitor performance and iterate on configurations to optimize the user experience continually.\nConclusion: Firebase RemoteConfig empowers mobile app developers with a flexible and efficient mechanism to manage remote configurations, allowing them to adapt quickly to changing requirements and deliver personalized experiences to their users. By leveraging RemoteConfig’s real-time updates, targeted structures, and simplified maintenance.\n","tags":["Firebase"],"title":"RemoteConfig in Firebase"},{"categories":["Blog"],"date":"May 23, 2022","permalink":"https://mahigarg.github.io/blogs/labeled-statement-swift/","section":"blogs","summary":"Swift has a few inbuilt features which make our life super easy. Labeled statements are one of them. It allows us to name a statement and later within the scope, that particular statement can be referenced using the label provided.\nLet me explain this using an example. Assume we have a nested loop inside another loop. We want to break the inner as well as out loop on some condition.\nfor i in 0...5 { for j in 0...5 { print (i + j) //break from outer loop if i + j == 5 } } Break statement can help here but break statement only works for immediate loop.\nfor i in 0...5 { for j in 0...5 { print (i + j) //break from outer loop if i + j == 5 if (i + j == 5) { break } } } It will just break the inner loop but not the outer loop.\nThere is one way where we can use a boolean flag and set it to true when we found the first condition true and every time we check inside the outer loop for that flag.\nThere is another way where we can move this to a function and return from the function when the first time condition met.\nBut there is a simpler way in swift which can help us here. we can name the loops as per the requirement and can break them using the name of the loop as below.\nouterLoop: for i in 0...5 { innerLoop: for j in 0...5 { print (i + j) //break from outer loop if i + j == 5 if (i + j == 5) { break outerLoop } } } We can skip the label if we are not going to use it inside.\nThese label statement can be used with if statement, for-loop, while-loop, repeat and switch statement which makes our life super easy.\n","tags":["Swift"],"title":"Labeled Statement : Swift"},{"categories":["Blog"],"date":"January 1, 0001","permalink":"https://mahigarg.github.io/blogs/set-swift/","section":"blogs","summary":"A set is an unordered collection of unique elements, meaning it does not allow duplicates. Swift\u0026rsquo;s Set data type ensures that each element occurs only once in the collection. You can think of sets as a mathematical set, where the order of elements does not matter, and there are no duplicate elements. Swift\u0026rsquo;s Set data type uses hash tables internally to store elements, which allows for fast access and modification. This is the reason time complexity for set operation is much better than array.\nLet us explore syntax, usage, time complexity and various operations that can be performed on sets.\nCreating a Set: In Swift, In Swift, you can create a set using the Set keyword, specifying the type of elements the set will hold. Here\u0026rsquo;s an example of creating a set of integers:\nvar integerSet: Set\u0026lt;Int\u0026gt; = [1, 2, 3, 4, 5] Alternatively, you can use type inference to let Swift deduce the type of the set:\nvar anotherSet = Set\u0026lt;String\u0026gt;() anotherSet.insert(\u0026#34;apple\u0026#34;) anotherSet.insert(\u0026#34;banana\u0026#34;) anotherSet.insert(\u0026#34;orange\u0026#34;) Insertion and Deletion To add elements to a set, you can use the insert(_:) method. Insertion and deletion in sets have an average-case time complexity of O(1). Examples:\nvar mySet = Set\u0026lt;Character\u0026gt;() mySet.insert(\u0026#34;a\u0026#34;) mySet.insert(\u0026#34;b\u0026#34;) Membership Test To check if an element exists in a set, you can use the contains(_:) method: Examples:\nif mySet.contains(\u0026#34;a\u0026#34;) { print(\u0026#34;The set contains \u0026#39;a\u0026#39;.\u0026#34;) } else { print(\u0026#34;The set does not contain \u0026#39;a\u0026#39;.\u0026#34;) } Set Operations (Union, Intersection, Difference, Subset) Sets also support various set operations such as union, intersection, difference, and subset checks. Union, intersection, and difference operations have an average-case time complexity of O(m), where m is the number of elements in the smaller set. Swift uses an efficient algorithm to compute these operations, leveraging the benefits of hash tables. The isSubset(of:) method also has an average-case time complexity of O(m), where m is the number of elements in the subset being checked. Here\u0026rsquo;s an example:\nlet set1: Set\u0026lt;Int\u0026gt; = [1, 2, 3, 4] let set2: Set\u0026lt;Int\u0026gt; = [3, 4, 5, 6] let unionSet = set1.union(set2) // {1, 2, 3, 4, 5, 6} let intersectionSet = set1.intersection(set2) // {3, 4} let differenceSet = set1.subtracting(set2) // {1, 2} let isSubset = set1.isSubset(of: set2) // false Conclusion: In conclusion, sets are a powerful data structure for managing collections of unique elements. Swift\u0026rsquo;s Set data type provides efficient insertion, deletion, and membership test operations with an average-case time complexity of O(1). Additionally, set operations like union, intersection, and difference, as well as subset checks, have an average-case time complexity of O(m), where m is the number of elements in the smaller set involved in the operation. Happy coding!\n","tags":["Swift"],"title":"Set: Swift"}]