<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mahi Garg</title>
    <link>https://mahigarg.github.io/</link>
    <description>Recent content on Mahi Garg</description>
    <generator>Hugo</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 27 Oct 2024 00:00:00 +0000</lastBuildDate>
    <atom:link href="https://mahigarg.github.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UserDefaults in Swift</title>
      <link>https://mahigarg.github.io/blogs/userdefaults-in-swift/</link>
      <pubDate>Sun, 27 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/userdefaults-in-swift/</guid>
      <description>&lt;p&gt;In Swift, &lt;code&gt;UserDefaults&lt;/code&gt; provides a straightforward way to store small amounts of data that need to persist across app launches, such as user preferences or settings. It’s a great tool for saving simple data types like &lt;code&gt;String&lt;/code&gt;, &lt;code&gt;Int&lt;/code&gt;, &lt;code&gt;Bool&lt;/code&gt;, and even collections such as &lt;code&gt;Array&lt;/code&gt; and &lt;code&gt;Dictionary&lt;/code&gt;. In this blog, we’ll cover the basics of &lt;code&gt;UserDefaults&lt;/code&gt;, how to use it, best practices, and a guide on creating a &lt;code&gt;UserDefaultsManager&lt;/code&gt; to simplify your usage further.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OptionSet vs Enum in Swift</title>
      <link>https://mahigarg.github.io/blogs/optionset-vs-enum-in-swift/</link>
      <pubDate>Fri, 25 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/optionset-vs-enum-in-swift/</guid>
      <description>&lt;p&gt;In Swift, both &lt;code&gt;OptionSet&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt; are common patterns for representing options or states. While they share some similarities, they serve different purposes and have distinct use cases. In this blog, we’ll explore &lt;code&gt;OptionSet&lt;/code&gt; and &lt;code&gt;enum&lt;/code&gt; in Swift, examine their unique characteristics, and look at practical examples to help clarify when to use each.&lt;/p&gt;</description>
    </item>
    <item>
      <title>OptionSet in Swift</title>
      <link>https://mahigarg.github.io/blogs/optionset-in-swift/</link>
      <pubDate>Wed, 23 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/optionset-in-swift/</guid>
      <description>&lt;p&gt;In Swift, an &lt;code&gt;OptionSet&lt;/code&gt; is a powerful way to represent a collection of unique options or flags using a bitwise format. &lt;code&gt;OptionSet&lt;/code&gt; works especially well when you need to define multiple independent settings or features, such as configuration options, permissions, or state indicators. This blog post will explore what &lt;code&gt;OptionSet&lt;/code&gt; is, how to use it, and some practical examples to demonstrate its capabilities.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Opaque Types vs Generics in Swift</title>
      <link>https://mahigarg.github.io/blogs/opaque-types-vs-generics-in-swift/</link>
      <pubDate>Mon, 21 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/opaque-types-vs-generics-in-swift/</guid>
      <description>&lt;p&gt;Swift’s type system offers powerful tools to handle abstraction and flexibility, including Opaque Types and Generics. While both serve to manage and generalize types, they work differently and are used in distinct scenarios. In this post, we’ll explore their differences, use cases, and examples to understand when to use one over the other.&lt;/p&gt;</description>
    </item>
    <item>
      <title>LRU Cache Implementation in Swift</title>
      <link>https://mahigarg.github.io/blogs/lru-cache-implementation-in-swift/</link>
      <pubDate>Sat, 19 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/lru-cache-implementation-in-swift/</guid>
      <description>&lt;p&gt;An LRU (Least Recently Used) Cache is a data structure that keeps track of the most recently used items and efficiently removes the least recently used ones when it reaches capacity. It’s commonly used to optimize memory usage in systems that handle large data sets by retaining only frequently accessed items.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Access Modifiers in Swift</title>
      <link>https://mahigarg.github.io/blogs/access-modifiers-in-swift/</link>
      <pubDate>Thu, 17 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/access-modifiers-in-swift/</guid>
      <description>&lt;p&gt;Access control is a fundamental feature in Swift that allows you to define the visibility and accessibility of various parts of your code. By using access modifiers, you can encapsulate implementation details and restrict unintended access to your code, ensuring safety and modularity.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Opaque in Swift</title>
      <link>https://mahigarg.github.io/blogs/opaque-in-swift/</link>
      <pubDate>Tue, 15 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/opaque-in-swift/</guid>
      <description>&lt;p&gt;Swift is known for its powerful type system and support for generics, which allows you to write flexible and reusable code. However, there are situations where generics can become overly complex or expose too much internal detail. To help with this, Swift introduced opaque types (using the some keyword) in Swift 5.1. Opaque types allow us to hide the underlying type while still maintaining strong type safety.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Some vs Any in Swift</title>
      <link>https://mahigarg.github.io/blogs/some-vs-any-in-swift/</link>
      <pubDate>Sat, 12 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/some-vs-any-in-swift/</guid>
      <description>&lt;p&gt;Swift 5.7 introduced two powerful keywords, &lt;code&gt;some&lt;/code&gt; and &lt;code&gt;any&lt;/code&gt;, to work with protocols in generic programming. Although they serve different purposes, they both deal with protocols and types. If you&amp;rsquo;re unfamiliar with how to use them or what sets them apart, this blog post will clarify their differences and show you practical examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>One Sided Range in Swift</title>
      <link>https://mahigarg.github.io/blogs/one-sided-range-in-swift/</link>
      <pubDate>Fri, 11 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/one-sided-range-in-swift/</guid>
      <description>&lt;p&gt;Swift provides a powerful way to work with collections through ranges, which define a sequence of values with a start and an end. In addition to the traditional closed (&lt;code&gt;...&lt;/code&gt;) and half-open (&lt;code&gt;..&amp;lt;&lt;/code&gt;) ranges, Swift introduces one-sided ranges, a feature that makes working with sequences and collections more flexible and concise.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Class Heirarchy of UIButton, UILabel and UIImageView in Swift</title>
      <link>https://mahigarg.github.io/blogs/class-hierarchy-of-uibutton-uilabel-and-uiimageview-in-swift/</link>
      <pubDate>Sun, 06 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/class-hierarchy-of-uibutton-uilabel-and-uiimageview-in-swift/</guid>
      <description>&lt;p&gt;When building user interfaces in iOS applications, UIKit provides a wide array of components, each designed for specific use cases. Three of the most commonly used UI components are &lt;code&gt;UIButton&lt;/code&gt;, &lt;code&gt;UILabel&lt;/code&gt;, and &lt;code&gt;UIImageView&lt;/code&gt;. These components share a common ancestor in the UIKit class hierarchy but serve different purposes and exhibit different behaviors.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Try Catch and Throws: Error Handling in Swift</title>
      <link>https://mahigarg.github.io/blogs/try-catch-and-throws-error-handling-in-swift/</link>
      <pubDate>Tue, 01 Oct 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/try-catch-and-throws-error-handling-in-swift/</guid>
      <description>&lt;p&gt;Error handling is an essential feature of modern programming languages, allowing developers to gracefully manage runtime issues without crashing an app. Swift has a robust error-handling system based on the concepts of throwing, catching, propagating, and handling errors. In this blog, we will explore how error handling works in Swift using &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;catch&lt;/code&gt;, and &lt;code&gt;throws&lt;/code&gt; with detailed explanations and practical examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Round vs Floor vs Ceil : Swift</title>
      <link>https://mahigarg.github.io/blogs/round-vs-floor-vs-ceil-swift/</link>
      <pubDate>Sat, 28 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/round-vs-floor-vs-ceil-swift/</guid>
      <description>&lt;p&gt;In Swift, working with floating-point numbers often requires you to round values to their nearest whole number or perform specific types of rounding. The three primary functions that help with this are:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Associated Types in Swift</title>
      <link>https://mahigarg.github.io/blogs/associated-types-in-swift/</link>
      <pubDate>Wed, 25 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/associated-types-in-swift/</guid>
      <description>&lt;p&gt;Swift&amp;rsquo;s powerful generics system allows developers to write flexible and reusable code. One of the core features of generics is associated types, which are used in protocols to define placeholder types that get specified later when the protocol is adopted by a class, struct, or enum. Understanding associated types is crucial when working with Swift’s protocols, and in this blog, we&amp;rsquo;ll explore their concept, usage, and real-world examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Property Observers (WillSet &amp; DidSet) in Swift</title>
      <link>https://mahigarg.github.io/blogs/property-observers-willset-didset-in-swift/</link>
      <pubDate>Sat, 21 Sep 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/property-observers-willset-didset-in-swift/</guid>
      <description>&lt;p&gt;Property observers in Swift are an incredibly useful feature that allows you to monitor and respond to changes in a property’s value. They are especially handy when you want to perform additional tasks whenever a property is set or updated, such as updating the UI, logging data, or enforcing business logic.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Count with where clause (count(where:)) in Swift</title>
      <link>https://mahigarg.github.io/blogs/count-with-where-clause-in-swift/</link>
      <pubDate>Sun, 25 Aug 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/count-with-where-clause-in-swift/</guid>
      <description>&lt;p&gt;In Swift, the &lt;code&gt;count(where:)&lt;/code&gt; method is a powerful tool for filtering and counting elements in a collection that meet specific criteria. This method is part of the Swift Standard Library&amp;rsquo;s extensions to &lt;code&gt;Sequence&lt;/code&gt; and allows for a concise and expressive way to determine how many elements in a collection match a given predicate.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find K Closest Elements - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/find-k-closest-elements-leetcode/</link>
      <pubDate>Sat, 17 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/find-k-closest-elements-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/find-k-closest-elements/description/&#34;&gt;Find K Closest Elements - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given a sorted integer array &lt;code&gt;arr&lt;/code&gt;, two integers &lt;code&gt;k&lt;/code&gt; and &lt;code&gt;x&lt;/code&gt;, return the &lt;code&gt;k&lt;/code&gt; closest integers to &lt;code&gt;x&lt;/code&gt; in the array. The result should also be sorted in ascending order.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Intersection of Two Arrays - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/intersection-of-two-arrays-leetcode/</link>
      <pubDate>Thu, 15 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/intersection-of-two-arrays-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/intersection-of-two-arrays/description/&#34;&gt;Intersection of Two Arrays - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given two integer arrays &lt;code&gt;nums1&lt;/code&gt; and &lt;code&gt;nums2&lt;/code&gt;, return an array of their intersection. Each element in the result must be unique and you may return the result in any order.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Contains Duplicate II - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/contains-duplicate-ii-leetcode/</link>
      <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/contains-duplicate-ii-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/contains-duplicate-ii/description/&#34;&gt;Contains Duplicate II - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;, return &lt;code&gt;true&lt;/code&gt; if there are two distinct indices &lt;code&gt;i&lt;/code&gt; and &lt;code&gt;j&lt;/code&gt; in the array such that &lt;code&gt;nums[i] == nums[j]&lt;/code&gt; and &lt;code&gt;abs(i - j) &amp;lt;= k&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Minimum Size Subarray Sum - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/minimum-size-subarray-sum-leetcode/</link>
      <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/minimum-size-subarray-sum-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/minimum-size-subarray-sum/description/&#34;&gt;Minimum Size Subarray Sum - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an array of positive integers &lt;code&gt;nums&lt;/code&gt; and a positive integer &lt;code&gt;target&lt;/code&gt;, return the minimal length of a subarray whose sum is greater than or equal to &lt;code&gt;target&lt;/code&gt;. If there is no such subarray, return &lt;code&gt;0&lt;/code&gt; instead.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Repeated DNA Sequences - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/repeated-dna-sequences-leetcode/</link>
      <pubDate>Fri, 09 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/repeated-dna-sequences-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/repeated-dna-sequences/description/?&#34;&gt;Repeated DNA Sequences - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The DNA sequence is composed of a series of nucleotides abbreviated as &lt;code&gt;&#39;A&#39;&lt;/code&gt;, &lt;code&gt;&#39;C&#39;&lt;/code&gt;, &lt;code&gt;&#39;G&#39;&lt;/code&gt;, and &lt;code&gt;&#39;T&#39;&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Longest Substring Without Repeating Characters - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/longest-substring-without-repeating-characters-leetcode/</link>
      <pubDate>Sat, 03 Feb 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/longest-substring-without-repeating-characters-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-substring-without-repeating-characters/description/&#34;&gt;Longest Substring Without Repeating Characters - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt;, find the length of the longest substring without repeating characters.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Majority Element - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/majority-element-leetcode/</link>
      <pubDate>Wed, 31 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/majority-element-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/majority-element/description/&#34;&gt;Majority Element - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an array &lt;code&gt;nums&lt;/code&gt; of size &lt;code&gt;n&lt;/code&gt;, return the majority element.&lt;/p&gt;&#xA;&lt;p&gt;The majority element is the element that appears more than &lt;code&gt;[n / 2]&lt;/code&gt; times. You may assume that the majority element always exists in the array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Longest Substring with At Least K Repeating Characters - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/longest-substring-with-at-least-k-repeating-characters-leetcode/</link>
      <pubDate>Thu, 25 Jan 2024 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/longest-substring-with-at-least-k-repeating-characters-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-substring-with-at-least-k-repeating-characters/description/&#34;&gt;Longest Substring with At Least K Repeating Characters - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt; and an integer &lt;code&gt;k&lt;/code&gt;, return the length of the longest substring of &lt;code&gt;s&lt;/code&gt; such that the frequency of each character in this substring is greater than or equal to &lt;code&gt;k&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Search Insert Position - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/search-insert-position-leetcode/</link>
      <pubDate>Fri, 15 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/search-insert-position-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/search-insert-position/description/&#34;&gt;Search Insert Position - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given a sorted array of distinct integers and a target value, return the index if the target is found. If not, return the index where it would be if it were inserted in order.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Find Peak Element - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/find-peak-element-leetcode/</link>
      <pubDate>Thu, 14 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/find-peak-element-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/find-peak-element/description/&#34;&gt;Find Peak Element - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;A peak element is an element that is strictly greater than its neighbors.&lt;/p&gt;&#xA;&lt;p&gt;Given a 0-indexed integer array &lt;code&gt;nums&lt;/code&gt;, find a peak element, and return its index. If the array contains multiple peaks, return the index to any of the peaks.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Search a 2D Matrix - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/search-a-2d-matrix-leetcode/</link>
      <pubDate>Wed, 13 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/search-a-2d-matrix-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/search-a-2d-matrix/description/&#34;&gt;Search a 2D Matrix - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;You are given an &lt;code&gt;m x n&lt;/code&gt; integer matrix &lt;code&gt;matrix&lt;/code&gt; with the following two properties:&lt;/p&gt;</description>
    </item>
    <item>
      <title>Length of Last Word - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/length-of-last-word-leetcode/</link>
      <pubDate>Tue, 12 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/length-of-last-word-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/length-of-last-word/description/&#34;&gt;Length of Last Word - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given a string &lt;code&gt;s&lt;/code&gt; consisting of words and spaces, return the length of the last word in the string.&#xA;A word is a maximal substring consisting of non-space characters only.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Roman to Integer - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/roman-to-integer-leetcode/</link>
      <pubDate>Mon, 11 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/roman-to-integer-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/roman-to-integer/description/&#34;&gt;Roman to Integer - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Roman numerals are represented by seven different symbols: &lt;code&gt;I&lt;/code&gt;, &lt;code&gt;V&lt;/code&gt;, &lt;code&gt;X&lt;/code&gt;, &lt;code&gt;L&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;M&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remove Duplicates from Sorted Array II - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/remove-duplicates-from-sorted-array-ii-leetcode/</link>
      <pubDate>Sun, 10 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/remove-duplicates-from-sorted-array-ii-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-duplicates-from-sorted-array-ii/description/&#34;&gt;Remove Duplicates from Sorted Array || - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; sorted in non-decreasing order, remove some duplicates in-place such that each unique element appears at most twice. The relative order of the elements should be kept the same.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Best Time to Buy and Sell Stock - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/best-time-to-buy-and-sell-stock-leetcode/</link>
      <pubDate>Sat, 09 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/best-time-to-buy-and-sell-stock-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/best-time-to-buy-and-sell-stock/description/&#34;&gt;Best Time to Buy and Sell Stock - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;You are given an array &lt;code&gt;prices&lt;/code&gt; where &lt;code&gt;prices[i]&lt;/code&gt; is the price of a given stock on the &lt;code&gt;ith&lt;/code&gt; day.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rotate Array - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/rotate-array-leetcode-swift/</link>
      <pubDate>Fri, 08 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/rotate-array-leetcode-swift/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/rotate-array/description/&#34;&gt;Rotate Array - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt;, rotate the array to the right by &lt;code&gt;k&lt;/code&gt; steps, where &lt;code&gt;k&lt;/code&gt; is non-negative.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remove Duplicates from Sorted Array - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/remove-duplicates-from-sorted-array-leetcode/</link>
      <pubDate>Wed, 06 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/remove-duplicates-from-sorted-array-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-duplicates-from-sorted-array/description/&#34;&gt;Remove Duplicates from Sorted Array - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; sorted in non-decreasing order, remove the duplicates in-place such that each unique element appears only once. The relative order of the elements should be kept the same. Then return the number of unique elements in &lt;code&gt;nums&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remove Element - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/remove-element-leetcode/</link>
      <pubDate>Tue, 05 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/remove-element-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/remove-element/description/&#34;&gt;Remove Element - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an integer array &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;val&lt;/code&gt;, remove all occurrences of &lt;code&gt;val&lt;/code&gt; in &lt;code&gt;nums&lt;/code&gt; in-place. The order of the elements may be changed. Then return the number of elements in &lt;code&gt;nums&lt;/code&gt; which are not equal to &lt;code&gt;val&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merge Sorted Array - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/merge-sorted-array-leetcode-swift/</link>
      <pubDate>Mon, 04 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/merge-sorted-array-leetcode-swift/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/merge-sorted-array/description/&#34;&gt;Merge Sorted Array - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;You are given two integer arrays &lt;code&gt;nums1&lt;/code&gt; and &lt;code&gt;nums2&lt;/code&gt;, sorted in non-decreasing order, and two integers &lt;code&gt;m&lt;/code&gt; and &lt;code&gt;n&lt;/code&gt;, representing the number of elements in nums1 and nums2 respectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Next Greater Element I - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/next-greater-element-i-leetcode/</link>
      <pubDate>Sun, 03 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/next-greater-element-i-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/next-greater-element-i/description/&#34;&gt;Next Greater Element I - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;The next greater element of some element &lt;code&gt;x&lt;/code&gt; in an array is the first greater element that is to the right of x in the same array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Longest Common Prefix - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/longest-common-prefix-leetcode/</link>
      <pubDate>Sat, 02 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/longest-common-prefix-leetcode/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/longest-common-prefix/description/&#34;&gt;Longest Common Prefix - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Write a function to find the longest common prefix string amongst an array of strings.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Two Sum - LeetCode : Swift</title>
      <link>https://mahigarg.github.io/gists/two-sum-leetcode-swift/</link>
      <pubDate>Fri, 01 Sep 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/two-sum-leetcode-swift/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://leetcode.com/problems/two-sum/description/&#34;&gt;Two Sum - LeetCode&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;Given an array of integers &lt;code&gt;nums&lt;/code&gt; and an integer &lt;code&gt;target&lt;/code&gt;, return indices of the two numbers such that they add up to &lt;code&gt;target&lt;/code&gt;.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Fidget Loader : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/fidget-loader-swiftui/</link>
      <pubDate>Wed, 30 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/fidget-loader-swiftui/</guid>
      <description>&lt;p&gt;The Fidget Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lazy Loader : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/lazy-loader-swiftui/</link>
      <pubDate>Tue, 29 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/lazy-loader-swiftui/</guid>
      <description>&lt;p&gt;The Lazy Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arc Progress Loader : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/arc-progress-loader-swiftui/</link>
      <pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/arc-progress-loader-swiftui/</guid>
      <description>&lt;p&gt;The Arc Progress Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Open Source Contribution</title>
      <link>https://mahigarg.github.io/opensourcecontribution/</link>
      <pubDate>Mon, 28 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/opensourcecontribution/</guid>
      <description>&lt;h3 id=&#34;swiftui-components-8-components&#34;&gt;SwiftUI Components (8 Components)&lt;/h3&gt;&#xA;&lt;p&gt;Below animations/loaders were published as SwiftUI components  which can directly be plugged into any iOS app and use. The source code for every component is also publicly available in the respective GitHub Gist. Please note that the recorded gifs below have fps limitation but the actual animations are smoother than the recorded gifs.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Four Sided Fidget Loader: SwiftUI</title>
      <link>https://mahigarg.github.io/gists/four-sided-fidget-loader-swiftui/</link>
      <pubDate>Sun, 27 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/four-sided-fidget-loader-swiftui/</guid>
      <description>&lt;p&gt;The Four Sided Fidget Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ripple Loader : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/ripple-loader-swiftui/</link>
      <pubDate>Sat, 26 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/ripple-loader-swiftui/</guid>
      <description>&lt;p&gt;The Ripple Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ring and Circle Loader : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/ring-and-circle-loader-swiftui/</link>
      <pubDate>Fri, 25 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/ring-and-circle-loader-swiftui/</guid>
      <description>&lt;p&gt;The Ring and Circle Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rotating Circular Sticks Loader : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/rotating-circular-sticks-loader-swiftui/</link>
      <pubDate>Thu, 24 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/rotating-circular-sticks-loader-swiftui/</guid>
      <description>&lt;p&gt;The Rotating Circular Sticks Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rotating Square Loader : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/rotating-square-loader-swiftui/</link>
      <pubDate>Wed, 23 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/rotating-square-loader-swiftui/</guid>
      <description>&lt;p&gt;The Rotating Square Loader is a dynamic and visually engaging iOS component built using SwiftUI, designed to enhance user experience by providing elegant loading animations within any iOS application. This component serves as an intuitive and customizable loading indicator, seamlessly integrating into various app interfaces.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Initializer in Swift</title>
      <link>https://mahigarg.github.io/blogs/initializer-in-swift/</link>
      <pubDate>Sat, 19 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/initializer-in-swift/</guid>
      <description>&lt;p&gt;In Swift, initializers are fundamental building blocks that allow you to create instances of classes, structures, and enumerations by setting up their initial state. Swift&amp;rsquo;s initializer syntax is expressive and versatile, offering a variety of ways to customize instance creation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Thread Safety in Swift</title>
      <link>https://mahigarg.github.io/blogs/thread-safety-in-swift/</link>
      <pubDate>Wed, 16 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/thread-safety-in-swift/</guid>
      <description>&lt;p&gt;Thread safety refers to a programming concept where data or resources are accessed and modified in a way that ensures correct behavior and prevents conflicts when multiple threads (concurrent execution units) are working with the same data simultaneously. In multi-threaded environments, without proper thread safety measures, unpredictable and erroneous behavior can occur due to race conditions and data inconsistencies.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unowned vs Optional Unowned References in Swift</title>
      <link>https://mahigarg.github.io/blogs/unowned-vs-optional-unowned-references-in-swift/</link>
      <pubDate>Mon, 14 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/unowned-vs-optional-unowned-references-in-swift/</guid>
      <description>&lt;p&gt;Memory management is a critical consideration in Swift development, and managing references is a key aspect of this. Two reference types that come into play are unowned and optional unowned references. Both are used to prevent strong reference cycles and manage memory efficiently. In this blog, we&amp;rsquo;ll delve into the differences between unowned and optional unowned references with examples to help you understand their applications.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Weak vs Unowned References in Swift</title>
      <link>https://mahigarg.github.io/blogs/weak-vs-unowned-references-in-swift/</link>
      <pubDate>Sat, 12 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/weak-vs-unowned-references-in-swift/</guid>
      <description>&lt;p&gt;Memory management is a vital consideration when developing applications, and Swift provides developers with different reference types to manage memory effectively. Two of these reference types, weak and unowned, are essential in preventing memory leaks and managing object lifetimes. In this blog, we&amp;rsquo;ll explore the differences between weak and unowned references through examples, helping you understand when to use each type.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Strong vs Weak vs Unowned References in Swift</title>
      <link>https://mahigarg.github.io/blogs/strong-vs-weak-vs-unowned-references-in-swift/</link>
      <pubDate>Thu, 10 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/strong-vs-weak-vs-unowned-references-in-swift/</guid>
      <description>&lt;p&gt;In the world of Swift programming, memory management is a critical aspect that developers need to consider to create efficient and reliable apps. One of the core concepts in memory management is the use of references to objects, which determine how objects are retained and released in memory. In Swift, there are three types of references that play a crucial role: strong, weak, and unowned references. In this blog, we will explore these three types of references with clear examples to help you understand their significance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>CoreData in SwiftUI</title>
      <link>https://mahigarg.github.io/blogs/coredata-swiftui/</link>
      <pubDate>Tue, 08 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/coredata-swiftui/</guid>
      <description>&lt;p&gt;Merge data management seamlessly with UI. Model, persist, and update app data effortlessly using declarative syntax. Fetch, sort, and filter data effortlessly, ensuring a responsive and engaging user experience. Simplify synchronization between data and UI layers for efficient, scalable app development.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Conditional Expressions in Swift</title>
      <link>https://mahigarg.github.io/blogs/conditional-expressions-in-swift/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/conditional-expressions-in-swift/</guid>
      <description>&lt;p&gt;Conditional expressions lie at the heart of programming, allowing developers to make decisions and control the flow of their code. In Swift, these expressions provide the foundation for branching logic and executing different paths based on conditions. In this blog, we&amp;rsquo;ll delve into the world of conditional expressions in Swift, exploring their syntax, various constructs, and providing practical examples to demonstrate their power and versatility.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Retain Cycle in Swift</title>
      <link>https://mahigarg.github.io/blogs/retain-cycle-in-swift/</link>
      <pubDate>Sun, 06 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/retain-cycle-in-swift/</guid>
      <description>&lt;p&gt;Swift&amp;rsquo;s automatic reference counting (ARC) system does a great job of managing memory, there&amp;rsquo;s a phenomenon called &lt;code&gt;retain cycle&lt;/code&gt; that can sneakily lead to memory leaks. In this blog post, we&amp;rsquo;ll delve into the world of retain cycles, understand how they occur, and learn effective strategies to prevent them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>@objc in swift</title>
      <link>https://mahigarg.github.io/blogs/objc-in-swift/</link>
      <pubDate>Fri, 04 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/objc-in-swift/</guid>
      <description>&lt;p&gt;The &lt;code&gt;@objc&lt;/code&gt; attribute in Swift facilitates seamless interaction between Swift and Objective-C codebases by exposing Swift declarations to the Objective-C runtime. It&amp;rsquo;s used to bridge the gap when working with Objective-C frameworks, allowing Swift properties, methods, and classes to be recognized by the Objective-C world. This attribute plays a crucial role in achieving interoperability and integration between the two languages.&lt;/p&gt;</description>
    </item>
    <item>
      <title>class vs struct: Swift</title>
      <link>https://mahigarg.github.io/blogs/classes-vs-struct-swift/</link>
      <pubDate>Wed, 02 Aug 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/classes-vs-struct-swift/</guid>
      <description>&lt;p&gt;In the realm of Swift programming, the choice between using classes or structs can significantly impact your code&amp;rsquo;s design, efficiency, and behavior. In this blog, we&amp;rsquo;ll embark on a journey through class and struct differences, focusing on scenarios where classes outshine structs. By exploring practical examples, we&amp;rsquo;ll illuminate the unique capabilities that classes bring to the table.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Nested Methods in swift</title>
      <link>https://mahigarg.github.io/blogs/nested-methods-in-swift/</link>
      <pubDate>Sun, 30 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/nested-methods-in-swift/</guid>
      <description>&lt;p&gt;Nested methods in Swift allow you to define a function within the body of another function. This inner function is only accessible within the enclosing function. It&amp;rsquo;s a powerful mechanism for modularizing code and keeping related functionality together.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Super in Swift</title>
      <link>https://mahigarg.github.io/blogs/super-in-swift/</link>
      <pubDate>Fri, 28 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/super-in-swift/</guid>
      <description>&lt;p&gt;In the dynamic world of Swift programming, the &lt;code&gt;super&lt;/code&gt; keyword serves as a bridge connecting the past and present—enabling seamless inheritance and collaboration between parent and child classes. Understanding the capabilities of the &lt;code&gt;super&lt;/code&gt; keyword is essential for effective object-oriented design and maintaining code coherence. In this blog, we&amp;rsquo;ll dive deep into the intricacies of the &lt;code&gt;super&lt;/code&gt; keyword in Swift, illustrated through practical examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swift Enum in detail</title>
      <link>https://mahigarg.github.io/blogs/swift-enum-in-detail/</link>
      <pubDate>Wed, 26 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/swift-enum-in-detail/</guid>
      <description>&lt;p&gt;Enumerations, commonly known as enums, are a versatile feature in Swift that allow you to define a group of related values in a structured manner. Enums provide a way to define a type with a limited set of related values. They help make code more readable, self-documenting, and type-safe by enforcing specific cases.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Self in Swift</title>
      <link>https://mahigarg.github.io/blogs/self-in-swift/</link>
      <pubDate>Mon, 24 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/self-in-swift/</guid>
      <description>&lt;p&gt;In the realm of Swift programming, mastering the &lt;code&gt;self&lt;/code&gt; keyword is essential for crafting clean and efficient code. This small but mighty keyword plays a significant role in object-oriented design, allowing developers to access and manipulate instance-specific properties and methods. In this blog, we&amp;rsquo;ll embark on a journey to unravel the mysteries of the &lt;code&gt;self&lt;/code&gt; keyword in Swift, complete with real-world examples that showcase its versatility and importance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Error Handling with do-catch in Swift</title>
      <link>https://mahigarg.github.io/blogs/error-handling-with-do-catch-in-swift/</link>
      <pubDate>Sat, 22 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/error-handling-with-do-catch-in-swift/</guid>
      <description>&lt;p&gt;Error handling is a crucial aspect of writing robust and reliable software applications. In Swift, the &lt;code&gt;do-catch&lt;/code&gt; construct provides a powerful mechanism for handling errors and gracefully recovering from unexpected situations. In this blog post, we&amp;rsquo;ll delve into the world of &lt;code&gt;do-catch&lt;/code&gt; in Swift, exploring its syntax, best practices, and real-world examples to help you master this essential feature.&lt;/p&gt;</description>
    </item>
    <item>
      <title>As Operator (as vs as? vs as!) in Swift</title>
      <link>https://mahigarg.github.io/blogs/as-operator-in-swift/</link>
      <pubDate>Thu, 20 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/as-operator-in-swift/</guid>
      <description>&lt;p&gt;Type casting is a fundamental concept in Swift that allows you to work with instances of different types in a flexible and safe manner. Swift provides three distinct type casting operators: &lt;code&gt;as&lt;/code&gt;, &lt;code&gt;as?&lt;/code&gt;, and &lt;code&gt;as!&lt;/code&gt;. In this blog post, we&amp;rsquo;ll delve into the differences between these operators, when to use each one, and provide real-world examples to illustrate their usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bubble Sort : Swift</title>
      <link>https://mahigarg.github.io/gists/bubble-sort-swift/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/bubble-sort-swift/</guid>
      <description>&lt;p&gt;Bubble sort is a simple and straightforward sorting algorithm commonly used in computer science. In Swift language, Bubble sort works by repeatedly swapping adjacent elements if they are in the wrong order until the entire list is sorted. It has a time complexity of O(n^2), making it inefficient for large data sets. The algorithm iterates through the list multiple times, comparing and swapping elements. However, it is easy to understand and implement, making it suitable for small or nearly sorted arrays where simplicity is prioritized over efficiency. For larger data sets, more efficient sorting algorithms like QuickSort or MergeSort are preferred.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Is Operator (is vs is? vs is!) in Swift</title>
      <link>https://mahigarg.github.io/blogs/is-operator-in-swift/</link>
      <pubDate>Tue, 18 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/is-operator-in-swift/</guid>
      <description>&lt;p&gt;Type checking is a crucial concept in Swift that allows you to determine the type of an instance or value at runtime. Swift offers three distinct type checking mechanisms: &lt;code&gt;is&lt;/code&gt;, &lt;code&gt;is?&lt;/code&gt;, and &lt;code&gt;is!&lt;/code&gt;. In this blog post, we&amp;rsquo;ll delve into the nuances of these operators, when to use each one, and provide real-world examples to illustrate their functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Try Statement (Try vs Try? vs Try!) in SWift</title>
      <link>https://mahigarg.github.io/blogs/try-statement-in-swift/</link>
      <pubDate>Sun, 16 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/try-statement-in-swift/</guid>
      <description>&lt;p&gt;Error handling is an integral part of any programming language, and Swift provides a versatile set of tools to handle errors effectively. In this blog post, we will unravel the differences between &lt;code&gt;try&lt;/code&gt;, &lt;code&gt;try?&lt;/code&gt;, and &lt;code&gt;try!&lt;/code&gt; in Swift. We&amp;rsquo;ll explore the scenarios where each variant is most appropriate and provide real-world examples to illustrate their usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Carousel View : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/carousel-view-swiftui/</link>
      <pubDate>Sat, 15 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/carousel-view-swiftui/</guid>
      <description>&lt;p&gt;A carousel view is a user interface component commonly used in mobile and web applications to display a collection of items in a horizontally scrolling manner. It allows users to swipe or navigate through a set of images, cards, or other content. The carousel view typically presents a subset of items at a time, with the ability to cycle through the remaining items. It is an engaging and intuitive way to showcase multiple pieces of content within a limited space, providing an interactive and visually appealing user experience.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type Casting (as Operator) in Swift</title>
      <link>https://mahigarg.github.io/blogs/type-casting-as-operator-in-swift/</link>
      <pubDate>Fri, 14 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/type-casting-as-operator-in-swift/</guid>
      <description>&lt;p&gt;Type casting is a powerful feature in Swift that allows you to work with instances of different types in a flexible and safe manner. Whether you&amp;rsquo;re dealing with class hierarchies or protocol conformances, type casting provides the tools to convert and manipulate instances effectively. In this blog post, we&amp;rsquo;ll explore the intricacies of type casting in Swift, complete with syntax explanations and real-world examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linked List Implementation: Swift</title>
      <link>https://mahigarg.github.io/gists/linked-list-implementation-swift/</link>
      <pubDate>Thu, 13 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/linked-list-implementation-swift/</guid>
      <description>&lt;p&gt;A linked list is a data structure in Swift that consists of nodes linked together via pointers or references. Each node contains data and a reference to the next node. Unlike an array, a linked list does not require contiguous memory allocation. Insertions and deletions can be performed efficiently in a linked list by updating the pointers, but accessing elements requires traversing the list linearly. Linked lists are useful when frequent insertions or deletions are expected, and their time complexity for most operations is O(1) or O(n) depending on the operation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Type Checking (is Operator) in Swift</title>
      <link>https://mahigarg.github.io/blogs/type-checking-is-operator-in-swift/</link>
      <pubDate>Wed, 12 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/type-checking-is-operator-in-swift/</guid>
      <description>&lt;p&gt;Type checking is a fundamental concept in programming languages, including Swift. It enables you to determine the type of a value or an instance at runtime, facilitating dynamic behavior and robust code. In this blog post, we&amp;rsquo;ll delve into the world of type checking in Swift, exploring its syntax, use cases, and providing real-world examples to help you grasp this essential concept.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Remove duplicates from array: Swift</title>
      <link>https://mahigarg.github.io/gists/remove-duplicate-from-array-swift/</link>
      <pubDate>Tue, 11 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/remove-duplicate-from-array-swift/</guid>
      <description>&lt;p&gt;To remove duplicates from an array in Swift using a dictionary, we can create an empty dictionary and iterate through the array. For each element, we use it as a key in the dictionary and assign a dummy value. The dictionary automatically removes duplicate keys, so we end up with only unique elements. The time complexity of this approach is O(n), where n is the number of elements in the array, making it an efficient solution for removing duplicates..&lt;/p&gt;</description>
    </item>
    <item>
      <title>If let vs Guard let in Swift</title>
      <link>https://mahigarg.github.io/blogs/if-let-vs-guard-let-in-swift/</link>
      <pubDate>Mon, 10 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/if-let-vs-guard-let-in-swift/</guid>
      <description>&lt;p&gt;Working with optionals is a common scenario in Swift, allowing us to handle situations where a value might be present or absent. Swift provides two powerful constructs, if let and guard let, to safely unwrap optional values. In this blog post, we&amp;rsquo;ll explore the differences between if let and guard let, understand their best use cases, and provide practical examples to demonstrate their elegance and safety.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Binary Serach : Swift</title>
      <link>https://mahigarg.github.io/gists/binary-serach-swift/</link>
      <pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/binary-serach-swift/</guid>
      <description>&lt;p&gt;Binary search is an efficient search algorithm used to locate a specific element in a sorted array or list. It works by repeatedly dividing the search space in half until the target element is found. In Swift, binary search is typically implemented recursively or iteratively. The time complexity of binary search is O(log n), where n is the number of elements in the array. This makes it highly efficient for large data sets as it eliminates half of the remaining search space at each step, significantly reducing the search time.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merge 2 sorted Array: Swift</title>
      <link>https://mahigarg.github.io/gists/merge-2-sorted-array-swift/</link>
      <pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/merge-2-sorted-array-swift/</guid>
      <description>&lt;p&gt;Merging two sorted Int arrays in Swift means combining them into a single sorted array while preserving the order. With Swift, you can efficiently implement the merging algorithm. By comparing elements in both arrays and arranging them accordingly, you&amp;rsquo;ll obtain a new sorted array. This process ensures that the elements from both arrays are in ascending order, allowing you to organize your data effectively. The merged sorted Int array can be readily used in your Swift app for various purposes like displaying sorted lists or conducting efficient searches.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Merge 2 sorted Linked List: Swift</title>
      <link>https://mahigarg.github.io/gists/merge-2-sorted-linked-list-swift/</link>
      <pubDate>Sat, 08 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/merge-2-sorted-linked-list-swift/</guid>
      <description>&lt;p&gt;Merging two sorted linked lists in Swift is like combining two ordered lists into one, while still maintaining the sorted order. You can use Swift to define the linked list structure and implement a merging algorithm. By comparing the elements in both lists and arranging them accordingly, you&amp;rsquo;ll create a new sorted linked list. This process ensures that the elements from both lists are in ascending order, resulting in a single, sorted, and merged linked list that you can use in your Swift app for efficient data organization.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Instagram Post : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/instagram-post-swiftui/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/instagram-post-swiftui/</guid>
      <description>&lt;p&gt;Coding an Instagram post in SwiftUI is an engaging project. You can use various components like images, text, and buttons to design a post layout. With SwiftUI&amp;rsquo;s simple syntax and powerful features, you can easily arrange the content and customize the post&amp;rsquo;s appearance. Adding interactive features like like and comment buttons makes the post come alive. It&amp;rsquo;s a fun way to learn SwiftUI and create your own unique Instagram-style posts, perfect for displaying your creativity or sharing with friends on social media.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Lazy Property in Swift</title>
      <link>https://mahigarg.github.io/blogs/lazy-property-in-swift/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/lazy-property-in-swift/</guid>
      <description>&lt;p&gt;Swift&amp;rsquo;s lazy properties are a remarkable feature that allows developers to defer the initialization of a property until it is first accessed. This delayed initialization can greatly improve performance, especially when dealing with resource-intensive or time-consuming operations. In this blog, we&amp;rsquo;ll explore lazy properties in Swift, understand how they work, and dive into practical examples where they can significantly enhance the efficiency of your code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Instagarm Logo : SwiftUI</title>
      <link>https://mahigarg.github.io/gists/instagram-logo-swiftui/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/instagram-logo-swiftui/</guid>
      <description>&lt;p&gt;Creating the Instagram logo in SwiftUI is an exciting task. Using basic shapes like circles, squares, and colors, you can piece together the iconic camera symbol and colorful gradient background. With SwiftUI&amp;rsquo;s user-friendly syntax and pre-built shape modifiers, you&amp;rsquo;ll enjoy a smooth coding experience. By combining shapes and arranging them creatively, you can replicate the recognizable Instagram logo, ready to be used in your own SwiftUI projects or to explore your coding creativity. Have fun and unleash your artistic side while coding this popular logo!&lt;/p&gt;</description>
    </item>
    <item>
      <title>Computed Property in Swift</title>
      <link>https://mahigarg.github.io/blogs/computed-property-in-swift/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/computed-property-in-swift/</guid>
      <description>&lt;p&gt;In Swift, computed properties are a powerful and elegant feature that allows developers to define custom accessors for their properties. Unlike stored properties, computed properties do not store a value directly. Instead, they calculate their value on-the-fly based on the getter and, if needed, the setter logic provided by the developer. This flexibility opens up numerous possibilities for streamlining code, encapsulating complex logic, and creating more readable and maintainable code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Insertion Sort : Swift</title>
      <link>https://mahigarg.github.io/gists/insertion-sort-swift/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/insertion-sort-swift/</guid>
      <description>&lt;p&gt;Insertion sort is a simple sorting algorithm in Swift that builds the final sorted array one element at a time. It iterates through the array, comparing each element with the sorted portion and placing it in the correct position. This process continues until all elements are sorted. Insertion sort has a time complexity of O(n^2) in the worst case, but it performs well on small data sets or partially sorted arrays. It also has an advantage in that it can efficiently sort elements in real-time as they are received or generated.&lt;/p&gt;</description>
    </item>
    <item>
      <title>guard let in Swift</title>
      <link>https://mahigarg.github.io/blogs/guard-let-in-swift/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/guard-let-in-swift/</guid>
      <description>&lt;p&gt;In the realm of Swift programming, handling optionals with precision is of paramount importance to ensure code safety and maintainability. One of the most elegant constructs for handling optionals is the guard let statement. In this blog, we will delve into the world of guard let and explore how it enables developers to gracefully exit functions early when dealing with optional values. By the end of this blog, you will understand why guard let is a powerful tool in your Swift programming arsenal.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Selection Sort : Swift</title>
      <link>https://mahigarg.github.io/gists/selection-sort-swift/</link>
      <pubDate>Wed, 28 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/selection-sort-swift/</guid>
      <description>&lt;p&gt;Selection sort is a sorting algorithm in Swift that works by repeatedly finding the minimum element from the unsorted portion of an array and swapping it with the element in the correct position. This process is iterated until the entire array is sorted. While simple to understand and implement, selection sort has a time complexity of O(n^2), making it inefficient for large data sets. However, it has the advantage of having a minimal number of swaps, which can be beneficial in certain memory-constrained scenarios.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Default Statement in Swift</title>
      <link>https://mahigarg.github.io/blogs/default-statement-in-swift/</link>
      <pubDate>Sat, 24 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/default-statement-in-swift/</guid>
      <description>&lt;p&gt;When working with switch statements in Swift, we often encounter situations where we need to handle known cases explicitly. However, there are times when we also want to handle unknown or unexpected cases gracefully. Swift provides us with a powerful tool, the default statement, to manage such scenarios. In this blog post, we&amp;rsquo;ll explore the default statement in Swift and learn how to effectively handle unknown cases with elegance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Sort Int Array of 0, 1 and 2 : Swift (Dutch National Flag )</title>
      <link>https://mahigarg.github.io/gists/sort-int-array-0-1-2-swift/</link>
      <pubDate>Fri, 23 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/sort-int-array-0-1-2-swift/</guid>
      <description>&lt;p&gt;The Dutch National Flag algorithm is a sorting algorithm that partitions an array into three sections: elements less than a given pivot, elements equal to the pivot, and elements greater than the pivot. In Swift, we can implement this algorithm by maintaining three pointers and swapping elements accordingly. The time complexity of the Dutch National Flag algorithm is O(n), where n is the number of elements in the array. It is an efficient algorithm for sorting arrays with a limited range of values, like sorting colors or other categorical data.&lt;/p&gt;</description>
    </item>
    <item>
      <title>List: SwiftUI</title>
      <link>https://mahigarg.github.io/gists/list-swiftui/</link>
      <pubDate>Tue, 20 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/gists/list-swiftui/</guid>
      <description>&lt;p&gt;In SwiftUI, the &lt;code&gt;List&lt;/code&gt; is a powerful tool for creating neat and organized scrolling lists in apps. Imagine it as a virtual scrollable sheet of paper where you can display various items, like names, messages, or to-do tasks. It automatically adjusts its content, so you don&amp;rsquo;t need to worry about updating the list when things change. Whether you want to showcase a bunch of contacts or a menu with different options, &lt;code&gt;List&lt;/code&gt; makes it simple and user-friendly. Users can smoothly scroll through the content, making it easy for them to find and interact with the information you present.&lt;/p&gt;</description>
    </item>
    <item>
      <title>if let in Swift</title>
      <link>https://mahigarg.github.io/blogs/if-let-in-swift/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/if-let-in-swift/</guid>
      <description>&lt;p&gt;Swift is known for its safety and strong typing, and one of its most powerful features is its handling of optionals. Optionals allow developers to express the possibility of a value being absent, preventing runtime crashes due to nil values. One of the key constructs used in Swift to work with optionals is the if let statement. In this blog, we will explore how if let can make your code cleaner and safer by safely unwrapping optionals in a concise manner.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Continue Statement in Swift</title>
      <link>https://mahigarg.github.io/blogs/continue-statement-in-swift/</link>
      <pubDate>Wed, 24 May 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/continue-statement-in-swift/</guid>
      <description>&lt;p&gt;Loop control is a fundamental aspect of programming, allowing developers to iterate over collections and execute specific tasks. However, in real-world scenarios, not every iteration requires the same action. Swift provides a powerful tool called the continue statement, which allows you to skip specific iterations and continue to the next one within a loop. In this blog post, we&amp;rsquo;ll explore the continue statement in Swift, along with practical examples to demonstrate its usefulness.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Swift Functions: Single and Multiple Value Returns</title>
      <link>https://mahigarg.github.io/blogs/swift-functions-single-and-multiple-value-returns/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/swift-functions-single-and-multiple-value-returns/</guid>
      <description>&lt;p&gt;In Swift, functions are the building blocks of code that encapsulate logic and perform specific tasks. They can return values to the caller, either as a single value or as multiple values using tuples. In this blog, we&amp;rsquo;ll explore how Swift functions can efficiently return single and multiple values, and how these powerful features can improve code organization and enhance code reuse.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Switch Statement in Swift</title>
      <link>https://mahigarg.github.io/blogs/switch-statement-in-swift/</link>
      <pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/switch-statement-in-swift/</guid>
      <description>&lt;p&gt;Swift&amp;rsquo;s powerful switch statement is a versatile control flow construct that enables developers to handle complex conditions and pattern matching with ease. Far beyond the conventional use cases, the switch statement in Swift boasts several features that make it an indispensable tool in every developer&amp;rsquo;s toolkit. In this blog, we will explore the various facets of Swift&amp;rsquo;s switch statement, discuss its unique capabilities, and delve into real-world examples to illustrate its flexibility and efficiency.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Closures: Swift</title>
      <link>https://mahigarg.github.io/blogs/closures-swift/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/closures-swift/</guid>
      <description>&lt;p&gt;Closures are a powerful feature of the Swift programming language that allows you to write code that can be passed around and executed at a later time. They are self-contained blocks of functionality.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Break Statement in Swift</title>
      <link>https://mahigarg.github.io/blogs/break-statement-in-swift/</link>
      <pubDate>Mon, 24 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/break-statement-in-swift/</guid>
      <description>&lt;p&gt;Control flow is an essential aspect of any programming language, and Swift is no exception. Swift provides a powerful and flexible control flow mechanism that allows developers to direct the flow of their code execution based on certain conditions. One such tool in the Swift developer&amp;rsquo;s toolbox is the break statement.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ternary Conditional Operator in Swift</title>
      <link>https://mahigarg.github.io/blogs/ternary-conditional-operator-in-swift/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/ternary-conditional-operator-in-swift/</guid>
      <description>&lt;p&gt;Swift&amp;rsquo;s Ternary Conditional Operator is a concise and powerful tool that allows developers to write compact conditional expressions. It provides a more concise alternative to traditional if-else statements, making code more readable and expressive. In this blog, we&amp;rsquo;ll explore the Ternary Conditional Operator in Swift, understand its syntax and usage, and explore real-world examples to illustrate its efficiency and elegance.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enums in Swift</title>
      <link>https://mahigarg.github.io/blogs/enums-in-swift/</link>
      <pubDate>Mon, 17 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/enums-in-swift/</guid>
      <description>&lt;p&gt;When it comes to writing clean, maintainable, and bug-free code, Swift provides a powerful feature called &lt;code&gt;enums&lt;/code&gt; or enumerations. Enums are a fundamental data type that allows developers to define a set of related values in a type-safe manner. They play a significant role in improving code readability, eliminating runtime errors, and enhancing overall code quality. In this blog, we&amp;rsquo;ll delve into the world of enums in Swift and explore how they can level up your coding game with some practical examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Inout in Swift</title>
      <link>https://mahigarg.github.io/blogs/inout-in-swift/</link>
      <pubDate>Wed, 12 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/inout-in-swift/</guid>
      <description>&lt;p&gt;Swift, being a modern and versatile programming language, offers various features to enhance code functionality and readability. One such powerful feature is the inout parameter, which allows two-way communication between a function and its caller. In this blog post, we&amp;rsquo;ll dive into the world of inout parameters in Swift, understand how they work, and explore practical examples of their usage.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Structs in Swift</title>
      <link>https://mahigarg.github.io/blogs/structs-in-swift/</link>
      <pubDate>Thu, 06 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/structs-in-swift/</guid>
      <description>&lt;p&gt;When it comes to designing data structures in Swift, one of the fundamental building blocks you&amp;rsquo;ll encounter is the &lt;code&gt;struct&lt;/code&gt;. A struct, short for structure, is a versatile and lightweight data type that allows you to encapsulate related properties and behaviors together. In this blog, we&amp;rsquo;ll delve into the world of structs in Swift, explore their features, benefits, and demonstrate how they can be used to create robust and maintainable code with practical examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Tuple in Swift</title>
      <link>https://mahigarg.github.io/blogs/tuple-in-swift/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/tuple-in-swift/</guid>
      <description>&lt;p&gt;In Swift, tuples are lightweight data structures that provide a simple and elegant way to group multiple values together. They offer great versatility and are widely used in various scenarios to pass around related pieces of data effortlessly. In this blog, we&amp;rsquo;ll explore the power of tuples in Swift, understand their syntax and usage, and dive into real-world examples to showcase their flexibility and usefulness.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Classes in Swift</title>
      <link>https://mahigarg.github.io/blogs/classes-in-swift/</link>
      <pubDate>Sun, 26 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/classes-in-swift/</guid>
      <description>&lt;p&gt;In the world of Swift, classes form the cornerstone of object-oriented programming (OOP). They provide a powerful mechanism to create blueprints for objects, allowing you to encapsulate data and behaviors together in a structured manner. In this blog, we&amp;rsquo;ll dive into the world of classes in Swift, explore their features, benefits, and demonstrate how they can be used to build sophisticated and reusable code with practical examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>NavigationView in SwiftUI</title>
      <link>https://mahigarg.github.io/blogs/navigationview-in-swiftui/</link>
      <pubDate>Sun, 19 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/navigationview-in-swiftui/</guid>
      <description>&lt;p&gt;Navigation involves moving between different screens or views within an app. SwiftUI provides a navigation view hierarchy that allows users to navigate between different views seamlessly. The NavigationView is the container view that manages the navigation stack and provides a NavigationBar at the top to facilitate navigation.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Dictionary: Swift</title>
      <link>https://mahigarg.github.io/blogs/dictionary-swift/</link>
      <pubDate>Tue, 14 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/dictionary-swift/</guid>
      <description>&lt;p&gt;Dictionaries in Swift provide a key-value pair mechanism for efficient data storage and retrieval. They are implemented using hash tables, allowing fast access and modification of values based on keys. Dictionaries support operations like adding, removing, and iterating over elements. With constant time complexity for most operations, dictionaries are a powerful tool for organizing and managing data in Swift programming.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Protocols in Swift</title>
      <link>https://mahigarg.github.io/blogs/protocols-in-swift/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/protocols-in-swift/</guid>
      <description>&lt;p&gt;In Swift, protocols are a powerful tool that empowers developers to create flexible, reusable, and scalable code. They play a pivotal role in achieving abstraction and enabling polymorphism, essential principles of object-oriented programming (OOP). In this blog, we&amp;rsquo;ll dive into the world of protocols in Swift, explore their features, benefits, and demonstrate how they can be used to design robust and adaptable code with practical examples.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Extensions in Swift</title>
      <link>https://mahigarg.github.io/blogs/extensions-in-swift/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/extensions-in-swift/</guid>
      <description>&lt;p&gt;Extensions in Swift allow developers to add new functionality to existing classes and protocols without modifying their original implementation. For classes, extensions can include new methods, computed properties, and initializers, promoting code modularity. For protocols, extensions can provide default implementations for methods, enhancing code adaptability. By separating concerns through extensions, developers can achieve cleaner, more organized code, increasing code reusability and maintainability in Swift projects.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Generics in Swift</title>
      <link>https://mahigarg.github.io/blogs/generics-in-swift/</link>
      <pubDate>Wed, 22 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/generics-in-swift/</guid>
      <description>&lt;p&gt;Generics allow us to write functions, structures, and classes that can work with different types while maintaining type safety. Rather than specifying concrete types, we use placeholders (type parameters) that get substituted with actual types when the code is used. This flexibility makes generics a valuable tool for writing versatile and adaptable code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Variable Types in Swift</title>
      <link>https://mahigarg.github.io/blogs/variable-types-in-swift/</link>
      <pubDate>Mon, 20 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/variable-types-in-swift/</guid>
      <description>&lt;p&gt;Swift is a powerful and versatile programming language that allows developers to create robust and efficient applications across various platforms. One of the fundamental aspects of Swift is its strong type system, which ensures safety and reliability in code. In this blog, we will dive into the world of variable types in Swift, exploring the various categories and providing examples to enhance your understanding.&lt;/p&gt;</description>
    </item>
    <item>
      <title>let vs var: Mutability in Swift</title>
      <link>https://mahigarg.github.io/blogs/let-vs-var-mutability-in-swift/</link>
      <pubDate>Fri, 17 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/let-vs-var-mutability-in-swift/</guid>
      <description>&lt;p&gt;Swift is a powerful and modern programming language that allows developers to build robust and efficient applications for various platforms. One of the key features of Swift is its support for both immutable constants and mutable variables through the use of &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt; declarations, respectively. In this blog, we will explore the differences between &lt;code&gt;let&lt;/code&gt; and &lt;code&gt;var&lt;/code&gt;, along with examples to illustrate their usage and significance in Swift programming.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Optional Type in Swift</title>
      <link>https://mahigarg.github.io/blogs/optional-type-in-swift/</link>
      <pubDate>Mon, 13 Feb 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/optional-type-in-swift/</guid>
      <description>&lt;p&gt;Swift is a robust and modern programming language that prioritizes safety and reliability. One of the key features that contribute to Swift&amp;rsquo;s safety is its handling of optional types. Optional types allow developers to indicate the possible absence of a value, which helps prevent runtime crashes due to unexpected nil values. In this blog, we will explore the concept of optional types in Swift, along with examples to demonstrate how they can be effectively utilized in your code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Do While (Repeat While) Loop in Swift</title>
      <link>https://mahigarg.github.io/blogs/do-while-repeat-while-loop-in-swift/</link>
      <pubDate>Tue, 31 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/do-while-repeat-while-loop-in-swift/</guid>
      <description>&lt;p&gt;Swift is a powerful and expressive programming language that offers a variety of loop structures to handle repetitive tasks efficiently. Among these, the do-while loop stands out as a loop that ensures the code inside the loop executes at least once, regardless of the loop&amp;rsquo;s condition. In this blog, we will explore the do-while loop in Swift, its syntax, and examples to showcase its usefulness in different scenarios.&lt;/p&gt;</description>
    </item>
    <item>
      <title>While Loop in Swift</title>
      <link>https://mahigarg.github.io/blogs/while-loop-in-swift/</link>
      <pubDate>Thu, 26 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/while-loop-in-swift/</guid>
      <description>&lt;p&gt;In any programming language, loops are essential for performing repetitive tasks efficiently. Swift offers a variety of loop structures, and one of the most versatile ones is the while loop. In this blog, we will explore the while loop in Swift, its syntax, and various examples to demonstrate how it can be utilized to achieve repetitive operations effectively.&lt;/p&gt;</description>
    </item>
    <item>
      <title>@State: SwiftUI</title>
      <link>https://mahigarg.github.io/blogs/state-swiftui/</link>
      <pubDate>Sun, 15 Jan 2023 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/state-swiftui/</guid>
      <description>&lt;p&gt;In SwiftUI, a powerful framework for building user interfaces, managing and updating the state of our views is essential for creating dynamic and interactive user experiences. One key tool SwiftUI provides for this purpose is the @State property wrapper.&lt;/p&gt;</description>
    </item>
    <item>
      <title>For loop with where clause: Swift</title>
      <link>https://mahigarg.github.io/blogs/for-loop-with-where-clause-swift/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/for-loop-with-where-clause-swift/</guid>
      <description>&lt;p&gt;For loop is an inevitable part of any programming language. It iterates over every element of the collection type data including array, set, and dictionary, and does the operation as per the code.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Round up to n Decimal Digit: Swift</title>
      <link>https://mahigarg.github.io/blogs/round-up-to-n-decimal-digit-swift/</link>
      <pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/round-up-to-n-decimal-digit-swift/</guid>
      <description>&lt;p&gt;We sometimes in our calculation get results with more than 4 decimal digits or even more. But as a developer, we can’t use the same to display to users.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Set: Swift</title>
      <link>https://mahigarg.github.io/blogs/set-swift/</link>
      <pubDate>Wed, 20 Jul 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/set-swift/</guid>
      <description>&lt;p&gt;A set is an unordered collection of unique elements, meaning it does not allow duplicates. Swift&amp;rsquo;s Set data type ensures that each element occurs only once in the collection. You can think of sets as a mathematical set, where the order of elements does not matter, and there are no duplicate elements. Swift&amp;rsquo;s Set data type uses hash tables internally to store elements, which allows for fast access and modification. This is the reason time complexity for set operation is much better than array.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Map Operator: Swift</title>
      <link>https://mahigarg.github.io/blogs/map-operator-swift/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/map-operator-swift/</guid>
      <description>&lt;p&gt;The collection is something which is used by almost everyone. It makes our life easy. &lt;code&gt;Array&lt;/code&gt;, &lt;code&gt;Set&lt;/code&gt;, and &lt;code&gt;Dictionary&lt;/code&gt; are the best examples of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>$0, $1 … $n in Swift</title>
      <link>https://mahigarg.github.io/blogs/0-1-n-in-swift/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/0-1-n-in-swift/</guid>
      <description>&lt;p&gt;In order to use any parameter in a closure or a higher-order function, we need to name the parameter inside the closure or higher-order function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Named and Unnamed Parameters: Swift</title>
      <link>https://mahigarg.github.io/blogs/named-and-unnamed-parameters-swift/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/named-and-unnamed-parameters-swift/</guid>
      <description>&lt;p&gt;Functions are something that every developer uses daily. A function can of with or without parameters. Swift has multiple ways of passing the parameters to a function. we can alias the parameter name or we can even skip the parameter name while calling the function.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Filter Operator: Swift</title>
      <link>https://mahigarg.github.io/blogs/filter-operator-swift/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/filter-operator-swift/</guid>
      <description>&lt;p&gt;The collection is something which is used by almost everyone. It makes our life easy. Array, Set, and Dictionary are the best examples of them.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Enumerated in Swift</title>
      <link>https://mahigarg.github.io/blogs/enumerated-in-swift/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/enumerated-in-swift/</guid>
      <description>&lt;p&gt;Enumerated is used to iterate over a collection along with the position access. It returns a sequence of Pairs where the first element in the Pair is the index and the second element is the element itself of the collection.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Labeled Statement : Swift</title>
      <link>https://mahigarg.github.io/blogs/labeled-statement-swift/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      <guid>https://mahigarg.github.io/blogs/labeled-statement-swift/</guid>
      <description>&lt;p&gt;Swift has a few inbuilt features which make our life super easy. Labeled statements are one of them.&#xA;It allows us to name a statement and later within the scope, that particular statement can be referenced using the label provided.&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
