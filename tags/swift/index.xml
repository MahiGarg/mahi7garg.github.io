<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Swift on Mahi Garg</title>
    <link>https://mahigarg.github.io/tags/swift/</link>
    <description>Recent content in Swift on Mahi Garg</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 06 Jul 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://mahigarg.github.io/tags/swift/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Protocols in Swift</title>
      <link>https://mahigarg.github.io/blogs/protocols-in-swift/</link>
      <pubDate>Thu, 06 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/protocols-in-swift/</guid>
      <description>In Swift, protocols are a powerful tool that empowers developers to create flexible, reusable, and scalable code. They play a pivotal role in achieving abstraction and enabling polymorphism, essential principles of object-oriented programming (OOP).</description>
    </item>
    
    <item>
      <title>Classes in Swift</title>
      <link>https://mahigarg.github.io/blogs/classes-in-swift/</link>
      <pubDate>Wed, 05 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/classes-in-swift/</guid>
      <description>In the world of Swift, classes form the cornerstone of object-oriented programming (OOP). They provide a powerful mechanism to create blueprints for objects, allowing you to encapsulate data and behaviors together in a structured manner.</description>
    </item>
    
    <item>
      <title>Structs in Swift</title>
      <link>https://mahigarg.github.io/blogs/structs-in-swift/</link>
      <pubDate>Tue, 04 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/structs-in-swift/</guid>
      <description>When it comes to designing data structures in Swift, one of the fundamental building blocks you&amp;rsquo;ll encounter is the struct. A struct, short for structure, is a versatile and lightweight data type that allows you to encapsulate related properties and behaviors together.</description>
    </item>
    
    <item>
      <title>Enums in Swift</title>
      <link>https://mahigarg.github.io/blogs/enums-in-swift/</link>
      <pubDate>Mon, 03 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/enums-in-swift/</guid>
      <description>When it comes to writing clean, maintainable, and bug-free code, Swift provides a powerful feature called enums or enumerations. Enums are a fundamental data type that allows developers to define a set of related values in a type-safe manner.</description>
    </item>
    
    <item>
      <title>Computed Property in Swift</title>
      <link>https://mahigarg.github.io/blogs/computed-property-in-swift/</link>
      <pubDate>Sun, 02 Jul 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/computed-property-in-swift/</guid>
      <description>In Swift, computed properties are a powerful and elegant feature that allows developers to define custom accessors for their properties. Unlike stored properties, computed properties do not store a value directly.</description>
    </item>
    
    <item>
      <title>guard let in Swift</title>
      <link>https://mahigarg.github.io/blogs/guard-let-in-swift/</link>
      <pubDate>Fri, 30 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/guard-let-in-swift/</guid>
      <description>guard let : Art of Early Returns with Optionals Introduction: In the realm of Swift programming, handling optionals with precision is of paramount importance to ensure code safety and maintainability.</description>
    </item>
    
    <item>
      <title>if let in Swift</title>
      <link>https://mahigarg.github.io/blogs/if-let-in-swift/</link>
      <pubDate>Fri, 16 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/if-let-in-swift/</guid>
      <description>if let - A Concise Way to Handle Optionals Introduction: Swift is known for its safety and strong typing, and one of its most powerful features is its handling of optionals.</description>
    </item>
    
    <item>
      <title>Lazy Property in Swift</title>
      <link>https://mahigarg.github.io/blogs/lazy-property-in-swift/</link>
      <pubDate>Sat, 03 Jun 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/lazy-property-in-swift/</guid>
      <description>Swift&amp;rsquo;s lazy properties are a remarkable feature that allows developers to defer the initialization of a property until it is first accessed.</description>
    </item>
    
    <item>
      <title>Swift Functions: Single and Multiple Value Returns</title>
      <link>https://mahigarg.github.io/blogs/swift-functions-single-and-multiple-value-returns/</link>
      <pubDate>Sun, 21 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/swift-functions-single-and-multiple-value-returns/</guid>
      <description>In Swift, functions are the building blocks of code that encapsulate logic and perform specific tasks. They can return values to the caller, either as a single value or as multiple values using tuples.</description>
    </item>
    
    <item>
      <title>Switch Statement in Swift</title>
      <link>https://mahigarg.github.io/blogs/switch-statement-in-swift/</link>
      <pubDate>Sat, 06 May 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/switch-statement-in-swift/</guid>
      <description>Swift&amp;rsquo;s powerful switch statement is a versatile control flow construct that enables developers to handle complex conditions and pattern matching with ease.</description>
    </item>
    
    <item>
      <title>Closures: Swift</title>
      <link>https://mahigarg.github.io/blogs/closures-swift/</link>
      <pubDate>Tue, 25 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/closures-swift/</guid>
      <description>Closures are a powerful feature of the Swift programming language that allows you to write code that can be passed around and executed at a later time.</description>
    </item>
    
    <item>
      <title>Ternary Conditional Operator in Swift</title>
      <link>https://mahigarg.github.io/blogs/ternary-conditional-operator-in-swift/</link>
      <pubDate>Thu, 20 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/ternary-conditional-operator-in-swift/</guid>
      <description>Swift&amp;rsquo;s Ternary Conditional Operator is a concise and powerful tool that allows developers to write compact conditional expressions. It provides a more concise alternative to traditional if-else statements, making code more readable and expressive.</description>
    </item>
    
    <item>
      <title>Tuple in Swift</title>
      <link>https://mahigarg.github.io/blogs/tuple-in-swift/</link>
      <pubDate>Sun, 02 Apr 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/tuple-in-swift/</guid>
      <description>In Swift, tuples are lightweight data structures that provide a simple and elegant way to group multiple values together. They offer great versatility and are widely used in various scenarios to pass around related pieces of data effortlessly.</description>
    </item>
    
    <item>
      <title>Dictionary: Swift</title>
      <link>https://mahigarg.github.io/blogs/dictionary-swift/</link>
      <pubDate>Sun, 05 Mar 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/dictionary-swift/</guid>
      <description>Dictionaries in Swift provide a key-value pair mechanism for efficient data storage and retrieval. They are implemented using hash tables, allowing fast access and modification of values based on keys.</description>
    </item>
    
    <item>
      <title>Extensions in Swift</title>
      <link>https://mahigarg.github.io/blogs/extensions-in-swift/</link>
      <pubDate>Sun, 26 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/extensions-in-swift/</guid>
      <description>Extensions in Swift allow developers to add new functionality to existing classes and protocols without modifying their original implementation. For classes, extensions can include new methods, computed properties, and initializers, promoting code modularity.</description>
    </item>
    
    <item>
      <title>Set: Swift</title>
      <link>https://mahigarg.github.io/blogs/set-swift/</link>
      <pubDate>Sat, 18 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/set-swift/</guid>
      <description>A set is an unordered collection of unique elements, meaning it does not allow duplicates. Swift&amp;rsquo;s Set data type ensures that each element occurs only once in the collection.</description>
    </item>
    
    <item>
      <title>Generics in Swift</title>
      <link>https://mahigarg.github.io/blogs/generics-in-swift/</link>
      <pubDate>Sat, 04 Feb 2023 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/generics-in-swift/</guid>
      <description>Generics allow us to write functions, structures, and classes that can work with different types while maintaining type safety. Rather than specifying concrete types, we use placeholders (type parameters) that get substituted with actual types when the code is used.</description>
    </item>
    
    <item>
      <title>For loop with where clause: Swift</title>
      <link>https://mahigarg.github.io/blogs/for-loop-with-where-clause-swift/</link>
      <pubDate>Mon, 22 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/for-loop-with-where-clause-swift/</guid>
      <description>For loop is an inevitable part of any programming language. It iterates over every element of the collection type data including array, set, and dictionary, and does the operation as per the code.</description>
    </item>
    
    <item>
      <title>Round up to n Decimal Digit: Swift</title>
      <link>https://mahigarg.github.io/blogs/round-up-to-n-decimal-digit-swift/</link>
      <pubDate>Tue, 16 Aug 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/round-up-to-n-decimal-digit-swift/</guid>
      <description>We sometimes in our calculation get results with more than 4 decimal digits or even more. But as a developer, we can’t use the same to display to users.</description>
    </item>
    
    <item>
      <title>Map Operator: Swift</title>
      <link>https://mahigarg.github.io/blogs/map-operator-swift/</link>
      <pubDate>Sun, 19 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/map-operator-swift/</guid>
      <description>The collection is something which is used by almost everyone. It makes our life easy. Array, Set, and Dictionary are the best examples of them.</description>
    </item>
    
    <item>
      <title>$0, $1 … $n in Swift</title>
      <link>https://mahigarg.github.io/blogs/0-1-n-in-swift/</link>
      <pubDate>Sat, 11 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/0-1-n-in-swift/</guid>
      <description>In order to use any parameter in a closure or a higher-order function, we need to name the parameter inside the closure or higher-order function.</description>
    </item>
    
    <item>
      <title>Named and Unnamed Parameters: Swift</title>
      <link>https://mahigarg.github.io/blogs/named-and-unnamed-parameters-swift/</link>
      <pubDate>Sat, 04 Jun 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/named-and-unnamed-parameters-swift/</guid>
      <description>Functions are something that every developer uses daily. A function can of with or without parameters. Swift has multiple ways of passing the parameters to a function.</description>
    </item>
    
    <item>
      <title>Filter Operator: Swift</title>
      <link>https://mahigarg.github.io/blogs/filter-operator-swift/</link>
      <pubDate>Sun, 29 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/filter-operator-swift/</guid>
      <description>The collection is something which is used by almost everyone. It makes our life easy. Array, Set, and Dictionary are the best examples of them.</description>
    </item>
    
    <item>
      <title>Enumerated in Swift</title>
      <link>https://mahigarg.github.io/blogs/enumerated-in-swift/</link>
      <pubDate>Sat, 28 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/enumerated-in-swift/</guid>
      <description>Enumerated is used to iterate over a collection along with the position access. It returns a sequence of Pairs where the first element in the Pair is the index and the second element is the element itself of the collection.</description>
    </item>
    
    <item>
      <title>Labeled Statement : Swift</title>
      <link>https://mahigarg.github.io/blogs/labeled-statement-swift/</link>
      <pubDate>Mon, 23 May 2022 00:00:00 +0000</pubDate>
      
      <guid>https://mahigarg.github.io/blogs/labeled-statement-swift/</guid>
      <description>Swift has a few inbuilt features which make our life super easy. Labeled statements are one of them. It allows us to name a statement and later within the scope, that particular statement can be referenced using the label provided.</description>
    </item>
    
  </channel>
</rss>
